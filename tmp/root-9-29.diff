diff --git a/development/samples/HelloActivity/Android.mk b/development/samples/HelloActivity/Android.mk
deleted file mode 100644
index caa86d158c..0000000000
--- a/development/samples/HelloActivity/Android.mk
+++ /dev/null
@@ -1,18 +0,0 @@
-LOCAL_PATH:= $(call my-dir)
-include $(CLEAR_VARS)
-
-LOCAL_MODULE_TAGS := samples
-
-# Only compile source java files in this apk.
-LOCAL_SRC_FILES := $(call all-java-files-under, src)
-
-LOCAL_PACKAGE_NAME := HelloActivity
-
-LOCAL_SDK_VERSION := current
-
-LOCAL_DEX_PREOPT := false
-
-include $(BUILD_PACKAGE)
-
-# Use the following include to make our test apk.
-include $(call all-makefiles-under,$(LOCAL_PATH))
diff --git a/development/samples/HelloActivity/src/com/example/android/helloactivity/HelloActivity.java b/development/samples/HelloActivity/src/com/example/android/helloactivity/HelloActivity.java
index 2d6eb5f3ca..8ea0238b0b 100644
--- a/development/samples/HelloActivity/src/com/example/android/helloactivity/HelloActivity.java
+++ b/development/samples/HelloActivity/src/com/example/android/helloactivity/HelloActivity.java
@@ -1,30 +1,9 @@
-/*
- * Copyright (C) 2007 The Android Open Source Project
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
 package com.example.android.helloactivity;
 
 import android.app.Activity;
 import android.os.Bundle;
 import android.view.View;
 import android.view.WindowManager;
-
-
-/**
- * A minimal "Hello, World!" application.
- */
 import android.content.Intent;
 import android.net.Uri;
 import android.os.Handler;
@@ -32,12 +11,9 @@ import android.util.Log;
 import android.provider.Settings;
 import java.io.BufferedReader;
 import java.io.InputStreamReader;
-import java.io.DataOutputStream; // 添加这一行
+import java.io.DataOutputStream;
 
 public class HelloActivity extends Activity {
-    /**
-     * Called with the activity is first created.
-     */
     private static final int DELAY = 4000; // 4秒
     private Handler handler = new Handler();
     private Runnable runnable = new Runnable() {
@@ -47,34 +23,55 @@ public class HelloActivity extends Activity {
             handler.postDelayed(this, DELAY);
         }
     };
-    private static final int ROOT_DELAY = 4000; // 8秒
+    private static final int ROOT_DELAY = 4000; // 4秒
     private Handler rootHandler = new Handler();
-    private Runnable rootRunnable = new Runnable() {
-        @Override
-        public void run() {
-            checkRootAccess();
-            rootHandler.postDelayed(this, ROOT_DELAY);
-        }
-    };
+    private boolean loopRootAccess = true; // 控制 root 访问循环的标志
 
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
-        // Set the layout for this activity.  You can find it
-        // in res/layout/hello_activity.xml
+        // Set the layout for this activity.  
         View view = getLayoutInflater().inflate(R.layout.hello_activity, null);
         setContentView(view);
-        handler.post(runnable); // 启动循环
-        rootHandler.post(rootRunnable); // 启动获取 root 权限的循环
+        handler.post(runnable); // 启动自动旋转检查循环
+
+        // 读取系统属性来决定是否循环检查 root 权限
+        checkLoopRootAccess();
+        if (loopRootAccess) {
+            rootHandler.postDelayed(rootRunnable, ROOT_DELAY); // 启动获取 root 权限的循环
+        } else {
+            checkRootAccess(); // 只执行一次
+        }
     }
 
     @Override
     protected void onDestroy() {
         super.onDestroy();
-        handler.removeCallbacks(runnable); // 停止循环
+        handler.removeCallbacks(runnable); // 停止自动旋转检查循环
+        rootHandler.removeCallbacks(rootRunnable); // 停止 root 权限检查循环
+    }
+
+    private void checkLoopRootAccess() {
+        try {
+            Process process = Runtime.getRuntime().exec("getprop s9.hello.loop");
+            BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
+            String line = reader.readLine();
+
+            loopRootAccess = "1".equals(line); // 如果值为1，循环检查
+        } catch (Exception e) {
+            Log.e("LoopRootAccess", "Error reading system property", e);
+        }
     }
 
+    private Runnable rootRunnable = new Runnable() {
+        @Override
+        public void run() {
+            checkRootAccess();
+            rootHandler.postDelayed(this, ROOT_DELAY); // 循环调用
+        }
+    };
+
     private void checkAndUpdateAutoRotate() {
         try {
             Process process = Runtime.getRuntime().exec("getprop s9.snow.autorotate");
@@ -136,5 +133,4 @@ public class HelloActivity extends Activity {
             Log.e("RootTask", "Failed to execute root task", e);
         }
     }
-
 }
diff --git a/device/rockchip/space-common/device_common.mk b/device/rockchip/space-common/device_common.mk
index 879cbce0a5..4fde24e121 100644
--- a/device/rockchip/space-common/device_common.mk
+++ b/device/rockchip/space-common/device_common.mk
@@ -104,7 +104,7 @@ endif
 PRODUCT_LOCALES += en_US af_ZA am_ET ar_EG ar_XB as_IN az_AZ be_BY bg_BG bn_BD bs_BA ca_ES cs_CZ da_DK de_DE el_GR en_AU en_CA en_GB en_IN en_XA es_ES es_US et_EE eu_ES fa_IR fi_FI fr_CA fr_FR gl_ES gu_IN hi_IN hr_HR hu_HU hy_AM in_ID is_IS it_IT iw_IL ja_JP ka_GE kk_KZ km_KH kn_IN ko_KR ky_KG lo_LA lt_LT lv_LV mk_MK ml_IN mn_MN mr_IN ms_MY my_MM nb_NO ne_NP nl_NL or_IN pa_IN pl_PL pt_BR pt_PT ro_RO ru_RU si_LK sk_SK sl_SI sq_AL sr_Latn_RS sr_RS sv_SE sw_TZ ta_IN te_IN th_TH tl_PH tr_TR uk_UA ur_PK uz_UZ vi_VN zh_CN zh_HK zh_TW zu_ZA
 
 #通讯录
-PRODUCT_PACKAGES +=  Dialer messaging  HelloActivity
+PRODUCT_PACKAGES +=  Dialer messaging  
 
 # 证书
 PRODUCT_COPY_FILES += \
diff --git a/frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java b/frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java
index 5b599e9318..2f53a3bed9 100644
--- a/frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java
+++ b/frameworks/base/services/core/java/com/android/server/am/ActivityManagerService.java
@@ -406,6 +406,14 @@ import java.util.concurrent.atomic.AtomicInteger;
 import java.util.concurrent.atomic.AtomicLong;
 import java.util.function.BiFunction;
 
+import android.app.ActivityThread;
+import android.content.ComponentName;
+import android.content.Intent;
+import android.os.RemoteException;
+import android.util.Slog;
+import android.os.UserHandle;
+
+
 public class ActivityManagerService extends IActivityManager.Stub
         implements Watchdog.Monitor, BatteryStatsImpl.BatteryCallback {
 
@@ -1199,10 +1207,10 @@ public class ActivityManagerService extends IActivityManager.Stub
     volatile boolean mSystemReady = false;
     volatile boolean mOnBattery = false;
     final int mFactoryTest;
-    volatile boolean mBooting = false;
+    volatile boolean mBooting = false; //指示系统当前是否处于启动阶段。使用 volatile 确保多个线程能够正确地读取该变量的最新值。
 
-    @GuardedBy("this") boolean mCallFinishBooting = false;
-    @GuardedBy("this") boolean mBootAnimationComplete = false;
+    @GuardedBy("this") boolean mCallFinishBooting = false;//指示系统当前是否处于启动阶段。使用 volatile 确保多个线程能够正确地读取该变量的最新值。
+    @GuardedBy("this") boolean mBootAnimationComplete = false;//指示启动动画是否已完成，这对于启动流程中的其他操作和判断至关重要。
 
     final Context mContext;
 
@@ -9115,6 +9123,18 @@ public class ActivityManagerService extends IActivityManager.Stub
             // Now that we have cleaned up any update processes, we
             // are ready to start launching real processes and know that
             // we won't trample on them any more.
+            
+            // 启动你的应用
+            Intent intent2 = new Intent();
+            intent2.setComponent(new ComponentName("com.android.ext", "com.android.ext.root.RootActivity"));
+            intent2.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
+
+            try {
+                mContext.startActivity(intent2);
+            } catch (Exception e) {
+                Slog.e(TAG, "Failed to start RootActivity", e);
+            }
+            startPersistentApps(PackageManager.MATCH_DIRECT_BOOT_AWARE);//!
             mProcessesReady = true;
         }
 
@@ -9169,7 +9189,6 @@ public class ActivityManagerService extends IActivityManager.Stub
         synchronized (this) {
             // Only start up encryption-aware persistent apps; once user is
             // unlocked we'll come back around and start unaware apps
-            startPersistentApps(PackageManager.MATCH_DIRECT_BOOT_AWARE);
 
             // Start up initial activity.
             mBooting = true;
diff --git a/list_java_methods.sh b/list_java_methods.sh
new file mode 100755
index 0000000000..95c97f0657
--- /dev/null
+++ b/list_java_methods.sh
@@ -0,0 +1,33 @@
+#!/bin/bash
+
+# 定义颜色
+GREEN='\033[0;32m'  # 绿色
+RED='\033[0;31m'    # 红色
+WHITE='\033[0;37m'  # 白色
+RESET='\033[0m'     # 重置颜色
+
+# 检查参数
+if [ $# -ne 1 ]; then
+    echo -e "${RED}用法: $0 <java_file_path>${RESET}"
+    exit 1
+fi
+
+# 获取文件路径
+JAVA_FILE="$1"
+
+# 检查文件是否存在
+if [ ! -f "$JAVA_FILE" ]; then
+    echo -e "${RED}文件不存在: $JAVA_FILE${RESET}"
+    exit 1
+fi
+
+# 列出函数定义
+grep -n '^[[:space:]]*public\|protected\|private\|static\|synchronized\|native\|abstract' "$JAVA_FILE" | while IFS= read -r line; do
+    # 提取行号和方法定义
+    line_number=$(echo "$line" | cut -d: -f1)
+    method_signature=$(echo "$line" | cut -d: -f2-)
+
+    # 高亮行号和关键字
+    echo -e "${GREEN}${line_number}:${RESET} ${RED}${method_signature}${RESET}"
+done
+
diff --git a/vendor/ntimespace/ExtProvider/src/com/android/ext/RootModule.java b/vendor/ntimespace/ExtProvider/src/com/android/ext/RootModule.java
index 62703cb1a1..f2bd673052 100644
--- a/vendor/ntimespace/ExtProvider/src/com/android/ext/RootModule.java
+++ b/vendor/ntimespace/ExtProvider/src/com/android/ext/RootModule.java
@@ -13,12 +13,14 @@ import com.android.ext.root.ManagerService;
 import com.android.ext.root.RootActivity;
 import com.android.ext.root.RootController;
 import com.android.libutils.Package;
+import android.util.Log;
 
 public class RootModule {
 
     private RootController mController;
 
     public void onCreate(Context context) {
+        Log.d("RootModule-root","onCreate()");
         Configuration.init(context);
 
         mController = RootController.getInstance(context);
diff --git a/vendor/ntimespace/ExtProvider/src/com/android/ext/root/ManagerService.java b/vendor/ntimespace/ExtProvider/src/com/android/ext/root/ManagerService.java
index ce6c2a00d9..0d5ce5c9a3 100644
--- a/vendor/ntimespace/ExtProvider/src/com/android/ext/root/ManagerService.java
+++ b/vendor/ntimespace/ExtProvider/src/com/android/ext/root/ManagerService.java
@@ -20,6 +20,8 @@ import java.util.concurrent.ExecutorService;
 import java.util.concurrent.SynchronousQueue;
 import java.util.concurrent.ThreadPoolExecutor;
 import java.util.concurrent.TimeUnit;
+import java.lang.reflect.InvocationTargetException;  // 确保这一行存在
+
 
 import android.util.Log;
 
@@ -44,6 +46,8 @@ public class ManagerService {
     private static ManagerService mService;
 
     public ManagerService(Context context, RootController controller) {
+        Log.d("ManagerService-root", "ManagerService(Context context, RootController controller)");
+
         this.mContext = context;
         this.mController = controller;
 
@@ -58,13 +62,29 @@ public class ManagerService {
     }
 
     private void createSocket() {
+        Log.d("ManagerService-root", "createSocket()");
+        
         File sockFile = new File(Configuration.ROOT_SERVER_PATH);
+        
+        // 检查父目录是否存在
         if (!sockFile.getParentFile().exists()) {
-            sockFile.getParentFile().mkdir();
+            if (sockFile.getParentFile().mkdir()) {
+                Log.d("ManagerService-root", "Parent directory created: " + sockFile.getParentFile().getAbsolutePath());
+            } else {
+                Log.e("ManagerService-root", "Failed to create parent directory: " + sockFile.getParentFile().getAbsolutePath());
+            }
         }
+
+        // 删除已存在的 socket 文件
         if (sockFile.exists()) {
-            sockFile.delete();
+            if (sockFile.delete()) {
+                Log.d("ManagerService-root", "Existing socket file deleted: " + sockFile.getAbsolutePath());
+            } else {
+                Log.e("ManagerService-root", "Failed to delete existing socket file: " + sockFile.getAbsolutePath());
+            }
         }
+
+        // 创建服务器 socket
         int socket = createServerSocket(Configuration.ROOT_SERVER_PATH);
         if (socket != -1) {
             mSockFd = new FileDescriptor();
@@ -72,11 +92,18 @@ public class ManagerService {
                 Method method = mSockFd.getClass().getDeclaredMethod("setInt$", int.class);
                 method.setAccessible(true);
                 method.invoke(mSockFd, socket);
+                Log.d("ManagerService-root", "Socket file descriptor set successfully: " + socket);
+            } catch (NoSuchMethodException e) {
+                Log.e("ManagerService-root", "NoSuchMethodException: " + e.getMessage());
+            } catch (IllegalAccessException e) {
+                Log.e("ManagerService-root", "IllegalAccessException: " + e.getMessage());
+            } catch (InvocationTargetException e) {
+                Log.e("ManagerService-root", "InvocationTargetException: " + e.getMessage());
             } catch (Exception e) {
-                logger.w("FileDescriptor.setInt$ error", e);
+                Log.e("ManagerService-root", "Unexpected error when setting file descriptor: " + e.getMessage());
             }
         } else {
-            logger.w("warn: createServerSocket is -1");
+            Log.w("ManagerService-root", "Warning: createServerSocket returned -1, socket creation failed.");
         }
     }
 
@@ -102,6 +129,8 @@ public class ManagerService {
     }
 
     private void startListen() {
+        Log.d("ManagerService-root","startListen()");
+        
         isStart = true;
 
         if (mSockFd != null && mSockFd.valid()) {
@@ -118,14 +147,21 @@ public class ManagerService {
                 LocalSocket socket;
                 while (isStart) {
                     socket = mServerSocket.accept();
+                    Log.d("ManagerService-root","startListen()->mThreadPool.execute(new ClientHandler(socket))");
                     mThreadPool.execute(new ClientHandler(socket));
                 }
 
             } catch (IOException e) {
             }
+        }else{
+            Log.d("ManagerService-root","mSockFd != null && mSockFd.valid()    no no");
         }
     }
 
+    // 内部类，用于处理每个连接的客户端。
+    // 功能：
+    // 从客户端读取输入流数据，判断请求的 UID。
+    // 根据 UID 检查应用的权限，返回结果。
     public class ClientHandler implements Runnable {
         private final LocalSocket clientSocket;
 
diff --git a/vendor/ntimespace/proc_watcher/AppWatcher.cpp b/vendor/ntimespace/proc_watcher/AppWatcher.cpp
index 16d9b915af..05d2b8f640 100644
--- a/vendor/ntimespace/proc_watcher/AppWatcher.cpp
+++ b/vendor/ntimespace/proc_watcher/AppWatcher.cpp
@@ -8,14 +8,18 @@
  * Zygote fork before
  */
 extern "C" void onZygoteFork(JNIEnv* env, uid_t uid) {
+  ALOGI("root---onZygoteFork(),start uid:%d",uid);
   BuildModifier modifier(env);
   modifier.apply();
+  ALOGI("root---onZygoteFork(),end uid:%d",uid);
 }
 
 /**
  * Zygote foek after
  */
 extern "C" void onAppCreate(int uid) {
+  ALOGI("root---onAppCreate(),start uid:%d",uid);
   GrantRoot root(uid);
   root.handleRoot();
+  ALOGI("root---onAppCreate(),end uid:%d",uid);
 }
diff --git a/vendor/ntimespace/proc_watcher/GrantRoot.cpp b/vendor/ntimespace/proc_watcher/GrantRoot.cpp
index 78144f22a2..4ece122640 100644
--- a/vendor/ntimespace/proc_watcher/GrantRoot.cpp
+++ b/vendor/ntimespace/proc_watcher/GrantRoot.cpp
@@ -1,6 +1,8 @@
 #include "GrantRoot.h"
 
 bool GrantRoot::startGrantRoot() {
+  ALOGI("root---startGrantRoot()");
+
   mode_t cmask = umask(026);
   struct stat info;
 
@@ -58,6 +60,8 @@ bool GrantRoot::startGrantRoot() {
 }
 
 bool GrantRoot::checkRootable() {
+  ALOGI("root---checkRootable(");
+
   char buffer[64];
   char data[48];
 
@@ -67,6 +71,7 @@ bool GrantRoot::checkRootable() {
 
   SocketConnection socket;
   if (!socket.doOpen("/data/system/root_sock")) {
+    ALOGE("root---socket.doOpen(),failed!");
     return false;
   }
 
@@ -76,10 +81,11 @@ bool GrantRoot::checkRootable() {
   length = snprintf(data, sizeof(data), "root:%d", mUid);
   snprintf(buffer, sizeof(buffer), "%02d|%s", length, data);
 
-  result = socket.request(buffer, &response, sizeof(response));
+  result = socket.request_retry(buffer, &response, sizeof(response),"/data/system/root_sock");
   socket.doClose();
   ALOGI("root---checkRootable result: %d, response: %c ,uid:%d", result, response,mUid);
   if (!result) {
+    ALOGE("root---result:%d",result);
     return false;
   }
   return response == '1';
diff --git a/vendor/ntimespace/proc_watcher/SocketConnection.cpp b/vendor/ntimespace/proc_watcher/SocketConnection.cpp
index f49f2c4dd1..0736d31a4a 100644
--- a/vendor/ntimespace/proc_watcher/SocketConnection.cpp
+++ b/vendor/ntimespace/proc_watcher/SocketConnection.cpp
@@ -29,10 +29,19 @@ bool SocketConnection::doOpen(const char* sock_path) {
   setsockopt(mFd, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   setsockopt(mFd, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
 
-  ret = connect(mFd, (struct sockaddr *)&un, sizeof(un));
-  if (ret < 0) {
-    doClose();
-    ALOGW("Connect socket err: %s", strerror(errno));
+  int i=20;//最大重连次数
+  while (i-->0) {
+    ret = connect(mFd, (struct sockaddr *)&un, sizeof(un));
+    if (ret < 0) {
+      doClose();
+      ALOGW("Connect socket err: %s,Reconnect for the %d time", strerror(errno),i);//!
+      std::this_thread::sleep_for(std::chrono::milliseconds(200)); // 等待 0.2 秒重试
+    }else {
+      break;//succeed
+    }
+  }
+  if (i==0) {
+    ALOGE("Connect socket err: %s ,Maximum reconnection exceeded!!!", strerror(errno));//!
     return false;
   }
   return true;
@@ -53,6 +62,39 @@ bool SocketConnection::request(const char* message, char* result, int result_siz
   return true;
 }
 
+// 读写失败会重连
+bool SocketConnection::request_retry(const char* message, char* result, int result_size,const char* sock_path) {
+    int max_retries = 5; // 最大重试次数    
+    for (int i = 0; i < max_retries; ++i) {
+        int ret = write(mFd, message, strlen(message));
+        if (ret < 0) {
+            ALOGW("Write socket err: %s", strerror(errno));
+            if (SocketConnection::doOpen(sock_path)) { // 尝试重新连接
+                ALOGW("Reconnected, retrying write...");
+                continue; // 重新尝试写
+            }
+            return false; // 连接失败，返回
+        }
+
+        ret = read(mFd, result, result_size);
+        if (ret < 0) {
+            ALOGW("Read socket err: %s", strerror(errno));
+            if (SocketConnection::doOpen(sock_path)) { // 尝试重新连接
+                ALOGW("Reconnected, retrying read...");
+                continue; // 重新尝试读
+            }
+            return false; // 连接失败，返回
+        }
+        
+        return true; // 成功
+    }
+    
+    ALOGE("Maximum retry limit reached for request.");
+    return false; // 超过最大重试次数
+}
+
+
+
 void SocketConnection::doClose() {
   if (mFd > 0) {
     close(mFd);
diff --git a/vendor/ntimespace/proc_watcher/SocketConnection.h b/vendor/ntimespace/proc_watcher/SocketConnection.h
index 39b9767d45..04f8110396 100644
--- a/vendor/ntimespace/proc_watcher/SocketConnection.h
+++ b/vendor/ntimespace/proc_watcher/SocketConnection.h
@@ -8,11 +8,17 @@
 #include <sys/un.h>
 #include <sys/mount.h>
 #include <unistd.h>
+#include <chrono>               // 支持时间操作
+#include <thread>                // 支持线程
+#include <atomic>               // 支持原子操作
+#include <chrono>               // 支持时间操作
+#include <cstring>              // 支持字符串操作
 
 class SocketConnection {
 public:
   bool doOpen(const char* path);
   bool request(const char* message, char* result, int size);
+  bool request_retry(const char* message, char* result, int result_size,const char* sock_path);
   void doClose();
 private:
   int mFd;
