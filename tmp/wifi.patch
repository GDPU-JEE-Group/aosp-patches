diff --git a/frameworks/opt/net/wifi/service/java/com/android/server/wifi/ScanRequestProxy.java b/frameworks/opt/net/wifi/service/java/com/android/server/wifi/ScanRequestProxy.java
index a4678440b2..48d5d4bcfd 100644
--- a/frameworks/opt/net/wifi/service/java/com/android/server/wifi/ScanRequestProxy.java
+++ b/frameworks/opt/net/wifi/service/java/com/android/server/wifi/ScanRequestProxy.java
@@ -115,31 +115,51 @@ public class ScanRequestProxy {
             // Ignore. These will be processed from the scan request listener.
         }
 
-        @Override
-        public void onResults(WifiScanner.ScanData[] scanDatas) {
-            if (mVerboseLoggingEnabled) {
-                Log.d(TAG, "Scan results received");
-            }
-            // For single scans, the array size should always be 1.
-            if (scanDatas.length != 1) {
-                Log.wtf(TAG, "Found more than 1 batch of scan results, Failing...");
-                sendScanResultBroadcast(false);
-                return;
-            }
-            WifiScanner.ScanData scanData = scanDatas[0];
-            ScanResult[] scanResults = scanData.getResults();
-            if (mVerboseLoggingEnabled) {
-                Log.d(TAG, "Received " + scanResults.length + " scan results");
-            }
-            // Only process full band scan results.
-            if (scanData.getBandScanned() == WifiScanner.WIFI_BAND_BOTH_WITH_DFS) {
-                // Store the last scan results & send out the scan completion broadcast.
-                mLastScanResults.clear();
-                mLastScanResults.addAll(Arrays.asList(scanResults));
-                sendScanResultBroadcast(true);
-            }
-        }
+        
+    public List<ScanResult> createFakeScanResults() {
+            Log.d("Wificx---","---1-.createFakeScanResults()");
+
+    List<ScanResult> fakeResults = new ArrayList<>();
+    ScanResult scanResult = new ScanResult();
+    scanResult.SSID = "MockWiFi";
+    scanResult.BSSID = "00:11:22:33:44:55";
+    scanResult.capabilities = "[WPA2-PSK-CCMP][ESS]";
+    scanResult.level = -50;
+    scanResult.frequency = 2412;
+    scanResult.timestamp = System.currentTimeMillis();
+    fakeResults.add(scanResult);
+            Log.d("Wificx---","---2-.createFakeScanResults()");
+
+    return fakeResults;
+}
+
+       @Override
+public void onResults(WifiScanner.ScanData[] scanDatas) {
+    if (mVerboseLoggingEnabled) {
+        Log.d(TAG, "Scan results received");
+    }
+    if (scanDatas.length != 1) {
+        Log.wtf(TAG, "Found more than 1 batch of scan results, Failing...");
+        sendScanResultBroadcast(false);
+        return;
+    }
+    WifiScanner.ScanData scanData = scanDatas[0];
+    ScanResult[] scanResults = scanData.getResults();
+    if (mVerboseLoggingEnabled) {
+        Log.d(TAG, "Received " + scanResults.length + " scan results");
+    }
+    if (scanData.getBandScanned() == WifiScanner.WIFI_BAND_BOTH_WITH_DFS) {
+        // 伪造WiFi信息
+        List<ScanResult> fakeResults = createFakeScanResults();
+        mLastScanResults.clear();
+            Log.d("Wificx---","---1-.mLastScanResults.addAll(fakeResults)");
+        
+        mLastScanResults.addAll(fakeResults);
+            Log.d("Wificx---","---2-.mLastScanResults.addAll(fakeResults)");
 
+        sendScanResultBroadcast(true);
+    }
+}
         @Override
         public void onFullResult(ScanResult fullScanResult) {
             // Ignore for single scans.
@@ -493,10 +513,85 @@ public class ScanRequestProxy {
             settings.hiddenNetworks = hiddenNetworkList.toArray(
                     new WifiScanner.ScanSettings.HiddenNetwork[0]);
         }
-        mWifiScanner.startScan(settings, new ScanRequestProxyScanListener(), workSource);
+        // mWifiScanner.startScan(settings, new ScanRequestProxyScanListener(), workSource);
+                        Log.d("Wificx---","---1-.mWifiScanner.startScan");
+        
+        mWifiScanner.startScan(settings, new MockScanListener(packageName), workSource);
+                        Log.d("Wificx---","---2-.mWifiScanner.startScan");
+        
         return true;
     }
 
+    private class MockScanListener implements WifiScanner.ScanListener {
+        private String packageName;
+
+        public MockScanListener(String packageName) {
+            this.packageName = packageName;
+        }
+
+        @Override
+        public void onSuccess() {
+            // 扫描成功，发送伪造的扫描结果
+            Log.d("Wificx---","onSuccess---2-.sendFakeScanResults()");
+            sendFakeScanResults();
+            Log.d("Wificx---","onSuccess ---2-.sendFakeScanResults()");
+        }
+
+        @Override
+        public void onFailure(int reason, String description) {
+            Log.d("Wificx---","---2-.onFailure()");
+
+            sendScanResultFailureBroadcastToPackage(packageName);
+        }
+
+        @Override
+        public void onResults(WifiScanner.ScanData[] results) {
+            Log.d("Wificx---","---2-.onResults()");
+
+            // 这里不需要实际处理
+        }
+
+        @Override
+        public void onFullResult(ScanResult fullScanResult) {
+            
+            Log.d("Wificx---","---2-.onFullResult()");
+
+            // 这里不需要实际处理
+        }
+
+        @Override
+        public void onPeriodChanged(int periodInMs) {
+            Log.d("Wificx---","---2-.onPeriodChanged()");
+
+            // 这里不需要实际处理
+        }
+    }
+private void sendFakeScanResults() {
+    Log.d("Wificx---", " --1--intent.putExtra(WifiManager.EXTRA_RESULTS_UPDATED, true)");
+
+    List<ScanResult> fakeResults = new ArrayList<>();
+    ScanResult scanResult = new ScanResult();
+    scanResult.SSID = "MockWiFi";
+    scanResult.BSSID = "00:11:22:33:44:55";
+    scanResult.capabilities = "[WPA2-PSK-CCMP][ESS]";
+    scanResult.level = -50;
+    scanResult.frequency = 2412;
+    scanResult.timestamp = System.currentTimeMillis();
+    fakeResults.add(scanResult);
+
+    // 更新mLastScanResults
+    mLastScanResults.clear();
+    mLastScanResults.addAll(fakeResults);
+
+    // 发送伪造的扫描结果广播
+    Intent intent = new Intent(WifiManager.SCAN_RESULTS_AVAILABLE_ACTION);
+    intent.putExtra(WifiManager.EXTRA_RESULTS_UPDATED, true);
+    mContext.sendBroadcast(intent);
+
+    Log.d("Wificx---", " --2--intent.putExtra(WifiManager.EXTRA_RESULTS_UPDATED, true)");
+}
+
+
     /**
      * Return the results of the most recent access point scan, in the form of
      * a list of {@link ScanResult} objects.
diff --git a/frameworks/opt/net/wifi/service/java/com/android/server/wifi/WifiServiceImpl.java b/frameworks/opt/net/wifi/service/java/com/android/server/wifi/WifiServiceImpl.java
index 20dc6d9800..2d2e1b41b2 100644
--- a/frameworks/opt/net/wifi/service/java/com/android/server/wifi/WifiServiceImpl.java
+++ b/frameworks/opt/net/wifi/service/java/com/android/server/wifi/WifiServiceImpl.java
@@ -638,11 +638,30 @@ public class WifiServiceImpl extends BaseWifiService {
             }
         }
         try {
+             List<ScanResult> results = new ArrayList<>();
+
+    // 模拟一个WiFi网络
+    ScanResult scanResult = new ScanResult();
+    scanResult.SSID = "MockWiFi";
+    scanResult.BSSID = "00:11:22:33:44:55";
+    scanResult.capabilities = "[WPA2-PSK-CCMP][ESS]";
+    scanResult.level = -50;
+    scanResult.frequency = 2412;
+    scanResult.timestamp = System.currentTimeMillis();
+
+    results.add(scanResult);
+
             mWifiPermissionsUtil.enforceCanAccessScanResults(packageName, callingUid);
             Mutable<Boolean> scanSuccess = new Mutable<>();
             boolean runWithScissorsSuccess = mWifiInjector.getClientModeImplHandler()
                     .runWithScissors(() -> {
+                        Log.d("Wificx---","---1-mScanRequestProxy.startScan");
                         scanSuccess.value = mScanRequestProxy.startScan(callingUid, packageName);
+                        Log.d("Wificx---","---2-mScanRequestProxy.startScan");
+                    
+
+                    // 强制设置扫描成功
+                    scanSuccess.value = true;
                     }, RUN_WITH_SCISSORS_TIMEOUT_MILLIS);
             if (!runWithScissorsSuccess) {
                 Log.e(TAG, "Failed to post runnable to start scan");
