diff --git a/frameworks/base/core/java/android/os/SystemProperties.java b/frameworks/base/core/java/android/os/SystemProperties.java
index 45384105cc..8a3efb29f9 100644
--- a/frameworks/base/core/java/android/os/SystemProperties.java
+++ b/frameworks/base/core/java/android/os/SystemProperties.java
@@ -109,7 +109,55 @@ public class SystemProperties {
     @TestApi
     public static String get(@NonNull String key) {
         if (TRACK_KEY_ACCESS) onKeyAccess(key);
-        return native_get(key);
+        
+        Log.d("hardware-info","SystemProperties.get: "+key+"="+native_get(key));
+        // 通配符匹配的键值对
+        // if (key.endsWith(".name") && key.equals("net.bt.name")) {
+        //     return "umi";
+        // } else if (key.endsWith(".device")) {
+        //     return "umi";
+        // } else if (key.endsWith(".brand")) {
+        //     return "Xiaomi";
+        // } else if (key.endsWith(".model")) {
+        //     return "Mi 10";
+        // } else if (key.endsWith(".manufacturer")) {
+        //     return "Xiaomi";
+        // }
+
+        // 精确匹配的键值对
+        switch (key) {
+            // case "ro.board.platform":
+            //     return "mt6873";
+            // case "ro.product.board":
+            //     return "MXWM";
+            // case "ro.build.product":
+            //     return "umi";// 后果：连不上该容器
+            // case "ro.build.flavor":
+            //     return "umi-user";
+            // case "ro.build.description":
+            //     return "umi-user 10 QKQ1.191117.002 V12.0.11.0.QJBCNXM release-keys";
+            // case "ro.build.fingerprint":
+            //     return "Xiaomi/umi/umi:10/QKQ1.191117.002/V12.0.11.0.QJBCNXM:user/release-keys";
+            // case "ro.soc.manufacturer":
+            //     return "null";
+            // case "display.gpu.glget.GL_VENDOR":
+            //     return "Mali";
+            // case "display.gpu.glget.GL_RENDERER":
+            //     return "Mali-G57";
+            // case "battery.batteryVoltage":
+            //     return "4000";
+            // case "battery.maxChargingVoltage":
+            //     return "5000";
+            // case "battery.maxChargingCurrent":
+            //     return "3000";
+            // case "battery.capacity":
+            //     return "4500";
+            // case "ro.boot.hardware":
+            // case "ro.hardware":
+            //     return "mt6873";
+            default:
+                return native_get(key);
+        }
     }
 
     /**
diff --git a/frameworks/base/core/java/com/android/internal/space/api/BatteryMock.java b/frameworks/base/core/java/com/android/internal/space/api/BatteryMock.java
index 785e7ecbcf..8f59c0d6bd 100644
--- a/frameworks/base/core/java/com/android/internal/space/api/BatteryMock.java
+++ b/frameworks/base/core/java/com/android/internal/space/api/BatteryMock.java
@@ -43,15 +43,15 @@ public class BatteryMock extends IMockCallback.Stub {
     public HealthInfo getMockHealthInfo() {
         HealthInfo healthInfo = new HealthInfo();
         if (isMock()) {
-            healthInfo.maxChargingCurrent = (int) mMap.getOrDefault("max_charging_current", 500000);
-            healthInfo.maxChargingVoltage = (int) mMap.getOrDefault("max_charging_voltage", 5000000);
-            healthInfo.batteryVoltage = (int) mMap.getOrDefault("voltage", 4121);
-            healthInfo.batteryTemperature = (int) mMap.getOrDefault("temperature", 250);
-            healthInfo.batteryCurrent = (int) mMap.getOrDefault("current", 1000);
-            healthInfo.batteryCycleCount = (int) mMap.getOrDefault("cycle_count", 1000);
-            healthInfo.batteryFullCharge = (int) mMap.getOrDefault("full_charge", 1000);
-            healthInfo.batteryChargeCounter = (int) mMap.getOrDefault("charge_counter", 5235);
-            healthInfo.batteryTechnology = (String) mMap.getOrDefault("technology", "Li-poly");
+            healthInfo.maxChargingCurrent = (int) mMap.getOrDefault("max_charging_current", 500000);//最大充电电流，表示电池能够承受的最大电流，单位是微安培（μA）。
+            healthInfo.maxChargingVoltage = (int) mMap.getOrDefault("max_charging_voltage", 5000000);//表示电池充电时能够承受的最大电压，单位是微伏特（μV）。
+            healthInfo.batteryVoltage = (int) mMap.getOrDefault("voltage", 4121);//电池电压，表示当前电池的电压值，单位是微伏特（μV）。
+            healthInfo.batteryTemperature = (int) mMap.getOrDefault("temperature", 250);// 电池温度，表示当前电池的温度，单位是 1/10 摄氏度。
+            healthInfo.batteryCurrent = (int) mMap.getOrDefault("current", 1000);//电池电流，表示电池当前的电流输出或输入，单位是微安培（μA）。
+            healthInfo.batteryCycleCount = (int) mMap.getOrDefault("cycle_count", 1000);//电池循环次数，表示电池完整的充电和放电循环次数。
+            healthInfo.batteryFullCharge = (int) mMap.getOrDefault("full_charge", 1000);//电池的满充电量，表示电池的最大充电容量，单位是微安时（μAh）。
+            healthInfo.batteryChargeCounter = (int) mMap.getOrDefault("charge_counter", 5235);//电池充电计数器，表示当前电池的充电状态，单位是微安时（μAh）。
+            healthInfo.batteryTechnology = (String) mMap.getOrDefault("technology", "Li-poly");//电池技术，表示电池的化学组成或技术类型（如 "Li-poly" 代表锂聚合物电池）
         }
         return healthInfo;
     }
diff --git a/frameworks/native/opengl/libs/GLES_CM/gl.cpp b/frameworks/native/opengl/libs/GLES_CM/gl.cpp
index bacd4b4bc8..1b4b25134a 100644
--- a/frameworks/native/opengl/libs/GLES_CM/gl.cpp
+++ b/frameworks/native/opengl/libs/GLES_CM/gl.cpp
@@ -346,11 +346,31 @@ extern "C" {
 
 extern "C" const GLubyte * __glGetString(GLenum name);
 
-const GLubyte * glGetString(GLenum name) {
-    const GLubyte * ret = egl_get_string_for_current_context(name);
-    if (ret == NULL) {
-        gl_hooks_t::gl_t const * const _c = &getGlThreadSpecific()->gl;
-        ret = _c->glGetString(name);
+#include <utils/Log.h> // 引入日志头文件
+#include <string.h>    // 为了使用 strcmp 函数
+
+const GLubyte* glGetString(GLenum name)
+{
+    const GLubyte* ret = nullptr;
+
+    switch (name) {
+        // case 0x1F00: // GL_VENDOR
+        //     ret = (const GLubyte*)"Qualcomm";
+        //     break;
+        // case 0x1F01: // GL_RENDERER
+        //     ret = (const GLubyte*)"Adreno (TM) 630";
+        //     break;
+        default:
+            // 如果不是自定义的情况，使用原始逻辑获取值
+            ret = egl_get_string_for_current_context(name);
+            if (ret == NULL) {
+                gl_hooks_t::gl_t const * const _c = &getGlThreadSpecific()->gl;
+                ret = _c->glGetString(name);
+            }
+            break;
     }
+
+    // 打印传入的参数和返回的值
+    ALOGI("glGetString (GLES_CM): called with name: 0x%x, returning: %s", name, ret ? (const char*)ret : "NULL");
     return ret;
 }
diff --git a/frameworks/opt/gamesdk/src/device_info/device_info.cpp b/frameworks/opt/gamesdk/src/device_info/device_info.cpp
index 4de634fd7a..11fa383dc8 100644
--- a/frameworks/opt/gamesdk/src/device_info/device_info.cpp
+++ b/frameworks/opt/gamesdk/src/device_info/device_info.cpp
@@ -91,11 +91,17 @@ int readHardware(std::vector<std::string>& result, ProtoErrors& errors) {
     errors.set_hardware("Could not read.");
     return 1;
   }
-  const std::string FIELD_KEY = "Hardware\t: ";
+  const std::string FIELD_KEY = "Hardware\t: ";//!
   std::string line;
   while (std::getline(f, line)) {
     if (::string_util::startsWith(line, FIELD_KEY)) {
+      // 读取到的原始CPU信息
       std::string val = line.substr(FIELD_KEY.length(), std::string::npos);
+      ALOGI("hardware-info readHardware(std::vector<std::string>& result, ProtoErrors& errors)");
+      ALOGI("hardware-info old-val:"+val);
+
+      // 伪装成其他型号
+      // val = "Qualcomm Snapdragon 710";
       result.push_back(val);
     }
   }
diff --git a/system/core/base/properties.cpp b/system/core/base/properties.cpp
index d5a5918cee..f4bb4cf433 100644
--- a/system/core/base/properties.cpp
+++ b/system/core/base/properties.cpp
@@ -27,6 +27,7 @@
 #include <limits>
 #include <map>
 #include <string>
+#include <log/log.h>
 
 #include <android-base/parseint.h>
 
@@ -79,6 +80,36 @@ static int __system_property_set(const char* key, const char* value) {
 
 std::string GetProperty(const std::string& key, const std::string& default_value) {
   std::string property_value;
+
+    // 添加伪装逻辑
+    // if (key == "ro.product.board") {
+    //     return "sdm710";
+    // } else if (key == "ro.baseband") {
+    //     return "sdm";
+    // } else if (key == "ro.board.platform") {
+    //     return "sdm710";
+    // } else if (key == "ro.boot.baseband") {
+    //     return "sdm";
+    // } else if (key == "persist.thermalengine.platform") {
+    //     return "qualcomm";
+    // } else if (key == "gsm.version.ril-impl") {
+    //     return "Qualcomm RIL 1.0";
+    // } else if (key == "ro.boot.hardware") {
+    //     return "qcom";
+    // } else if (key == "ro.hardware") {
+    //     return "qcom";
+    // } else if (key == "ro.product.brand") {
+    //     return "Meizu";
+    // } else if (key == "ro.product.device") {
+    //     return "M1852";
+    // } else if (key == "ro.product.manufacturer") {
+    //     return "Meizu";
+    // } else if (key == "ro.product.model") {
+    //     return "M1852";
+    // } else if (key == "ro.product.name") {
+    //     return "meizu_M1852_CN";
+    // }
+
 #if defined(__BIONIC__)
   const prop_info* pi = __system_property_find(key.c_str());
   if (pi == nullptr) return default_value;
@@ -94,9 +125,10 @@ std::string GetProperty(const std::string& key, const std::string& default_value
   if (it == g_properties.end()) return default_value;
   property_value = it->second;
 #endif
-  // If the property exists but is empty, also return the default value.
-  // Since we can't remove system properties, "empty" is traditionally
-  // the same as "missing" (this was true for cutils' property_get).
+  // 如果属性存在但为空，也返回默认值。
+  std::string res =property_value.empty() ? default_value : property_value;
+  ALOGI("hardware-info GetProperty(%s,%s)",key.c_str(),res.c_str());
+
   return property_value.empty() ? default_value : property_value;
 }
 
