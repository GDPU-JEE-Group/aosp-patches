diff --git a/frameworks/base/packages/SettingsLib/src/com/android/settingslib/wifi/WifiTracker.java b/frameworks/base/packages/SettingsLib/src/com/android/settingslib/wifi/WifiTracker.java
index f1c5f46a30..be34c1bee4 100644
--- a/frameworks/base/packages/SettingsLib/src/com/android/settingslib/wifi/WifiTracker.java
+++ b/frameworks/base/packages/SettingsLib/src/com/android/settingslib/wifi/WifiTracker.java
@@ -41,6 +41,8 @@ import android.os.HandlerThread;
 import android.os.Message;
 import android.os.Process;
 import android.os.SystemClock;
+import android.os.Bundle;
+import android.os.Parcelable;
 import android.provider.Settings;
 import android.text.format.DateUtils;
 import android.util.ArrayMap;
@@ -422,10 +424,57 @@ public class WifiTracker implements LifecycleObserver, OnStart, OnStop, OnDestro
     @AnyThread
     public List<AccessPoint> getAccessPoints() {
         synchronized (mLock) {
-            return new ArrayList<>(mInternalAccessPoints);
+            List<AccessPoint> accessPoints = new ArrayList<>(mInternalAccessPoints);
+
+            // 伪造的Wi-Fi节点列表
+            List<AccessPoint> fakeAccessPoints = createFakeAccessPoints();
+
+            // 合并伪造节点与实际节点
+            accessPoints.addAll(fakeAccessPoints);
+
+            return accessPoints;
         }
     }
 
+    private List<AccessPoint> createFakeAccessPoints() {
+        List<AccessPoint> fakeAccessPoints = new ArrayList<>();
+
+        // 创建第一个伪造的Wi-Fi节点
+        Bundle bundle1 = new Bundle();
+        bundle1.putString("key_ssid", "FakeWiFi1");
+        bundle1.putString("key_bssid", "00:11:22:33:44:55");
+        bundle1.putInt("key_security", AccessPoint.SECURITY_NONE);
+        bundle1.putParcelableArray("key_scanresults", new Parcelable[]{createFakeScanResult("FakeWiFi1", "00:11:22:33:44:55")});
+
+        AccessPoint fakeAp1 = new AccessPoint(mContext, bundle1);
+        fakeAccessPoints.add(fakeAp1);
+
+        // 创建第二个伪造的Wi-Fi节点
+        Bundle bundle2 = new Bundle();
+        bundle2.putString("key_ssid", "FakeWiFi2");
+        bundle2.putString("key_bssid", "66:77:88:99:AA:BB");
+        bundle2.putInt("key_security", AccessPoint.SECURITY_PSK);
+        bundle2.putParcelableArray("key_scanresults", new Parcelable[]{createFakeScanResult("FakeWiFi2", "66:77:88:99:AA:BB")});
+
+        AccessPoint fakeAp2 = new AccessPoint(mContext, bundle2);
+        fakeAccessPoints.add(fakeAp2);
+
+        // 可以根据需要继续添加更多的伪造节点
+
+        return fakeAccessPoints;
+    }
+
+    private ScanResult createFakeScanResult(String ssid, String bssid) {
+        ScanResult scanResult = new ScanResult();
+        scanResult.SSID = ssid;
+        scanResult.BSSID = bssid;
+        scanResult.capabilities = "[ESS]";
+        scanResult.level = -50; // 信号强度
+        scanResult.frequency = 2412; // 频率
+
+        return scanResult;
+    }
+
     public WifiManager getManager() {
         return mWifiManager;
     }
