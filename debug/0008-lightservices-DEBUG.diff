diff --git a/frameworks/base/core/java/android/util/LoggerUtilSnow.java b/frameworks/base/core/java/android/util/LoggerUtilSnow.java
new file mode 100644
index 0000000000..007e6b48fd
--- /dev/null
+++ b/frameworks/base/core/java/android/util/LoggerUtilSnow.java
@@ -0,0 +1,12 @@
+package android.util;
+/** @hide */
+public class LoggerUtilSnow {
+    /** @hide */
+    public static void logMethod(String methodName, Object... args) {
+        StringBuilder logMessage = new StringBuilder(methodName + " called with args: ");
+        for (Object arg : args) {
+            logMessage.append(arg).append(", ");
+        }
+        Slog.d("LightsService", logMessage.toString());
+    }
+}
diff --git a/frameworks/base/core/java/android/util/NetworkUtilSnow.java b/frameworks/base/core/java/android/util/NetworkUtilSnow.java
new file mode 100644
index 0000000000..1165af6849
--- /dev/null
+++ b/frameworks/base/core/java/android/util/NetworkUtilSnow.java
@@ -0,0 +1,134 @@
+package android.util;
+
+import java.io.InputStream;
+import java.io.OutputStream;
+import java.net.DatagramPacket;
+import java.net.DatagramSocket;
+import java.net.InetAddress;
+import java.net.Socket;
+import java.util.concurrent.ArrayBlockingQueue;
+import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+
+/** @hide */
+public class NetworkUtilSnow {
+
+    // 线程池大小限制
+    private static final int MAX_THREADS = 2;
+    private static final ExecutorService executorService = Executors.newFixedThreadPool(MAX_THREADS);
+    private static final BlockingQueue<Runnable> taskQueue = new ArrayBlockingQueue<>(10); // 队列最大容量
+
+    // 协议类型
+    public enum Protocol {
+        UDP,
+        TCP
+    }
+
+    /** @hide */
+    public static String sendData(String ip, int port, String data, Protocol protocol) {
+        switch (protocol) {
+            case UDP:
+                return sendDataUdp(ip, port, data);
+            case TCP:
+                return sendDataTcp(ip, port, data);
+            default:
+                return "error";
+        }
+    }
+
+    /** @hide */
+    private static String sendDataUdp(String ip, int port, String data) {
+        DatagramSocket socket = null;
+        try {
+            socket = new DatagramSocket();
+            byte[] buffer = data.getBytes();
+            InetAddress address = InetAddress.getByName(ip);
+            DatagramPacket packet = new DatagramPacket(buffer, buffer.length, address, port);
+            
+            // 发送数据
+            socket.send(packet);
+            Slog.d("NetworkUtil", "Sent data (UDP): " + data);
+
+            // 接收响应
+            byte[] receiveBuffer = new byte[1024];
+            DatagramPacket receivePacket = new DatagramPacket(receiveBuffer, receiveBuffer.length);
+            socket.setSoTimeout(1000); // 设置超时为1秒
+            socket.receive(receivePacket);
+            String receivedData = new String(receivePacket.getData(), 0, receivePacket.getLength());
+            Slog.d("NetworkUtil", "Received from server (UDP): " + receivedData);
+            return receivedData;
+        } catch (Exception e) {
+            Slog.e("NetworkUtil", "Error occurred (UDP): " + e.getMessage(), e);
+            return "error";
+        } finally {
+            if (socket != null && !socket.isClosed()) {
+                socket.close();
+            }
+        }
+    }
+
+    /** @hide */
+    private static String sendDataTcp(String ip, int port, String data) {
+        Socket socket = null;
+        try {
+            socket = new Socket(InetAddress.getByName(ip), port);
+            // 获取输出流，将数据发送到服务器
+            OutputStream outputStream = socket.getOutputStream();
+            outputStream.write(data.getBytes());
+            outputStream.flush();
+            Slog.d("NetworkUtil", "Sent data (TCP): " + data);
+
+            // 获取输入流，接收服务器的响应
+            InputStream inputStream = socket.getInputStream();
+            byte[] receiveBuffer = new byte[1024];
+            int bytesRead = inputStream.read(receiveBuffer);
+            if (bytesRead != -1) {
+                String receivedData = new String(receiveBuffer, 0, bytesRead);
+                Slog.d("NetworkUtil", "Received from server (TCP): " + receivedData);
+                return receivedData;
+            } else {
+                return "error";
+            }
+        } catch (Exception e) {
+            Slog.e("NetworkUtil", "Error occurred (TCP): " + e.getMessage(), e);
+            return "error";
+        } finally {
+            try {
+                if (socket != null && !socket.isClosed()) {
+                    socket.close();
+                }
+            } catch (Exception e) {
+                Slog.e("NetworkUtil", "Error closing socket (TCP): " + e.getMessage(), e);
+            }
+        }
+    }
+
+    /** @hide */
+    // 异步发送数据的接口
+    public interface NetworkCallback {
+        void onResponse(String response);
+        void onError(String error);
+    }
+
+    /** @hide */
+    public static void sendDataAsync(String ip, int port, String data, Protocol protocol, NetworkCallback callback) {
+        Runnable task = () -> {
+            String response = sendData(ip, port, data, protocol);
+            if ("error".equals(response)) {
+                callback.onError("Failed to send data");
+            } else {
+                callback.onResponse(response);
+            }
+        };
+
+        // 将任务放入线程池
+        executorService.submit(task);
+    }
+
+    /** @hide */
+    // 关闭线程池
+    public static void shutdown() {
+        executorService.shutdown();
+    }
+}
diff --git a/frameworks/base/services/core/java/com/android/server/lights/LightsService.java b/frameworks/base/services/core/java/com/android/server/lights/LightsService.java
index ac906bb23d..5753f120f4 100644
--- a/frameworks/base/services/core/java/com/android/server/lights/LightsService.java
+++ b/frameworks/base/services/core/java/com/android/server/lights/LightsService.java
@@ -24,6 +24,9 @@ import android.os.PowerManager;
 import android.os.Trace;
 import android.provider.Settings;
 import android.util.Slog;
+import android.util.LoggerUtilSnow;
+import android.util.NetworkUtilSnow;
+import android.util.S9Helper;
 import android.view.SurfaceControl;
 
 import com.android.server.SystemService;
@@ -59,11 +62,34 @@ public class LightsService extends SystemService {
 
         @Override
         public void setBrightness(int brightness) {
+            // LoggerUtilSnow.logMethod("setBrightness", brightness);
             setBrightness(brightness, BRIGHTNESS_MODE_USER);
+            synchronized (this) {
+                String request = "LightsService|setBrightness|";
+                // 从配置文件中获取 IP 和端口
+                String ip = S9Helper.get("/data/local/tmp/light.conf", "light.setBrightness.ip", "192.168.0.140");
+                Integer port = Integer.parseInt(S9Helper.get("/data/local/tmp/light.conf", "light.setBrightness.port", "18099"));
+
+                NetworkUtilSnow.sendDataAsync(ip, port, request + brightness, NetworkUtilSnow.Protocol.TCP,new NetworkUtilSnow.NetworkCallback() {
+                    @Override
+                    public void onResponse(String response) {
+                        // 处理收到的响应
+                        Slog.d("LightsService", "Response: " + response);
+                    }
+
+                    @Override
+                    public void onError(String error) {
+                        // 处理错误
+                        Slog.e("LightsService", "Error: " + error);
+                    }
+                });
+                Slog.d("LightsService", "ip: " + ip+port);
+            }
         }
 
         @Override
         public void setBrightness(int brightness, int brightnessMode) {
+            LoggerUtilSnow.logMethod("setBrightness", brightness, brightnessMode);
             synchronized (this) {
                 // LOW_PERSISTENCE cannot be manually set
                 if (brightnessMode == BRIGHTNESS_MODE_LOW_PERSISTENCE) {
@@ -96,6 +122,7 @@ public class LightsService extends SystemService {
 
         @Override
         public void setColor(int color) {
+            LoggerUtilSnow.logMethod("setColor", color);
             synchronized (this) {
                 setLightLocked(color, LIGHT_FLASH_NONE, 0, 0, 0);
             }
@@ -103,6 +130,7 @@ public class LightsService extends SystemService {
 
         @Override
         public void setFlashing(int color, int mode, int onMS, int offMS) {
+            LoggerUtilSnow.logMethod("setFlashing", color, mode, onMS, offMS);
             synchronized (this) {
                 setLightLocked(color, mode, onMS, offMS, BRIGHTNESS_MODE_USER);
             }
@@ -110,11 +138,13 @@ public class LightsService extends SystemService {
 
         @Override
         public void pulse() {
+            LoggerUtilSnow.logMethod("pulse");
             pulse(0x00ffffff, 7);
         }
 
         @Override
         public void pulse(int color, int onMS) {
+            LoggerUtilSnow.logMethod("pulse", color, onMS);
             synchronized (this) {
                 if (mColor == 0 && !mFlashing) {
                     setLightLocked(color, LIGHT_FLASH_HARDWARE, onMS, 1000,
@@ -127,6 +157,7 @@ public class LightsService extends SystemService {
 
         @Override
         public void turnOff() {
+            LoggerUtilSnow.logMethod("turnOff");
             synchronized (this) {
                 setLightLocked(0, LIGHT_FLASH_NONE, 0, 0, 0);
             }
@@ -134,6 +165,7 @@ public class LightsService extends SystemService {
 
         @Override
         public void setVrMode(boolean enabled) {
+            LoggerUtilSnow.logMethod("setVrMode", enabled);
             synchronized (this) {
                 if (mVrModeEnabled != enabled) {
                     mVrModeEnabled = enabled;
@@ -153,12 +185,14 @@ public class LightsService extends SystemService {
         }
 
         private void stopFlashing() {
+            LoggerUtilSnow.logMethod("stopFlashing");
             synchronized (this) {
                 setLightLocked(mColor, LIGHT_FLASH_NONE, 0, 0, BRIGHTNESS_MODE_USER);
             }
         }
 
         private void setLightLocked(int color, int mode, int onMS, int offMS, int brightnessMode) {
+            LoggerUtilSnow.logMethod("setLightLocked", color, mode, onMS, offMS, brightnessMode);
             if (shouldBeInLowPersistenceMode()) {
                 brightnessMode = BRIGHTNESS_MODE_LOW_PERSISTENCE;
             } else if (brightnessMode == BRIGHTNESS_MODE_LOW_PERSISTENCE) {
@@ -187,6 +221,7 @@ public class LightsService extends SystemService {
         }
 
         private boolean shouldBeInLowPersistenceMode() {
+            LoggerUtilSnow.logMethod("shouldBeInLowPersistenceMode");
             return mVrModeEnabled && mUseLowPersistenceForVR;
         }
 
@@ -214,14 +249,17 @@ public class LightsService extends SystemService {
 
     @Override
     public void onStart() {
+        LoggerUtilSnow.logMethod("onStart");
         publishLocalService(LightsManager.class, mService);
     }
 
     @Override
     public void onBootPhase(int phase) {
+        LoggerUtilSnow.logMethod("onBootPhase", phase);
     }
 
     private int getVrDisplayMode() {
+        LoggerUtilSnow.logMethod("getVrDisplayMode");
         int currentUser = ActivityManager.getCurrentUser();
         return Settings.Secure.getIntForUser(getContext().getContentResolver(),
                 Settings.Secure.VR_DISPLAY_MODE,
@@ -232,6 +270,7 @@ public class LightsService extends SystemService {
     private final LightsManager mService = new LightsManager() {
         @Override
         public Light getLight(int id) {
+            LoggerUtilSnow.logMethod("getLight", id);
             if (0 <= id && id < LIGHT_ID_COUNT) {
                 return mLights[id];
             } else {
@@ -243,7 +282,7 @@ public class LightsService extends SystemService {
     private Handler mH = new Handler() {
         @Override
         public void handleMessage(Message msg) {
-            LightImpl light = (LightImpl)msg.obj;
+            LightImpl light = (LightImpl) msg.obj;
             light.stopFlashing();
         }
     };
diff --git a/frameworks/base/services/core/jni/com_android_server_lights_LightsService.cpp b/frameworks/base/services/core/jni/com_android_server_lights_LightsService.cpp
index 26f6d7428f..61f6cd56cc 100644
--- a/frameworks/base/services/core/jni/com_android_server_lights_LightsService.cpp
+++ b/frameworks/base/services/core/jni/com_android_server_lights_LightsService.cpp
@@ -41,7 +41,11 @@ using Return     = ::android::hardware::Return<T>;
 
 static bool sLightSupported = true;
 
+#define LOG_METHOD(fmt, ...) \
+    ALOGD("JNI |%s called with args: " fmt, __PRETTY_FUNCTION__, ##__VA_ARGS__)
+
 static bool validate(jint light, jint flash, jint brightness) {
+    LOG_METHOD("light=%d, flash=%d, brightness=%d", light, flash, brightness);
     bool valid = true;
 
     if (light < 0 || light >= static_cast<jint>(Type::COUNT)) {
@@ -77,7 +81,10 @@ static LightState constructState(
         jint flashMode,
         jint onMS,
         jint offMS,
-        jint brightnessMode){
+        jint brightnessMode) {
+    LOG_METHOD("colorARGB=0x%08x, flashMode=%d, onMS=%d, offMS=%d, brightnessMode=%d",
+                colorARGB, flashMode, onMS, offMS, brightnessMode);
+
     Flash flash = static_cast<Flash>(flashMode);
     Brightness brightness = static_cast<Brightness>(brightnessMode);
 
@@ -86,7 +93,6 @@ static LightState constructState(
     if (brightness == Brightness::LOW_PERSISTENCE) {
         state.flashMode = Flash::NONE;
     } else {
-        // Only set non-brightness settings when not in low-persistence mode
         state.flashMode = flash;
         state.flashOnMs = onMS;
         state.flashOffMs = offMS;
@@ -102,6 +108,8 @@ static void processReturn(
         const Return<Status> &ret,
         Type type,
         const LightState &state) {
+    LOG_METHOD("ret.isOk()=%s, type=%d", ret.isOk() ? "true" : "false", static_cast<int>(type));
+
     if (!ret.isOk()) {
         ALOGE("Failed to issue set light command.");
         return;
@@ -133,6 +141,9 @@ static void setLight_native(
         jint offMS,
         jint brightnessMode) {
 
+    LOG_METHOD("light=%d, colorARGB=0x%08x, flashMode=%d, onMS=%d, offMS=%d, brightnessMode=%d",
+                light, colorARGB, flashMode, onMS, offMS, brightnessMode);
+
     if (!sLightSupported) {
         return;
     }
diff --git a/hardware/interfaces/light/2.0/default/Light.cpp b/hardware/interfaces/light/2.0/default/Light.cpp
index 5484d2db43..fd6e9220ba 100644
--- a/hardware/interfaces/light/2.0/default/Light.cpp
+++ b/hardware/interfaces/light/2.0/default/Light.cpp
@@ -46,12 +46,23 @@ static_assert(BRIGHTNESS_MODE_LOW_PERSISTENCE ==
 Light::Light(std::map<Type, light_device_t*> &&lights)
   : mLights(std::move(lights)) {}
 
+#define LOG_METHOD(fmt, ...) \
+    ALOGD("HAL-inf |%s called with args: " fmt, __PRETTY_FUNCTION__, ##__VA_ARGS__)
 // Methods from ::android::hardware::light::V2_0::ILight follow.
-Return<Status> Light::setLight(Type type, const LightState& state)  {
+Return<Status> Light::setLight(Type type, const LightState& state) {
+    LOG_METHOD("type: %d, state.color: 0x%x, state.flashMode: %d, state.flashOnMs: %d, state.flashOffMs: %d, state.brightnessMode: %d", 
+               static_cast<int>(type), 
+               state.color, 
+               static_cast<int>(state.flashMode), 
+               state.flashOnMs, 
+               state.flashOffMs, 
+               static_cast<int>(state.brightnessMode));
+
     auto it = mLights.find(type);
 
     if (it == mLights.end()) {
-        return Status::LIGHT_NOT_SUPPORTED;
+        // return Status::LIGHT_NOT_SUPPORTED;
+        return Status::SUCCESS;
     }
 
     light_device_t* hwLight = it->second;
@@ -68,7 +79,8 @@ Return<Status> Light::setLight(Type type, const LightState& state)  {
 
     switch (ret) {
         case -ENOSYS:
-            return Status::BRIGHTNESS_NOT_SUPPORTED;
+            // return Status::BRIGHTNESS_NOT_SUPPORTED;
+            return Status::SUCCESS;
         case 0:
             return Status::SUCCESS;
         default:
@@ -77,6 +89,8 @@ Return<Status> Light::setLight(Type type, const LightState& state)  {
 }
 
 Return<void> Light::getSupportedTypes(getSupportedTypes_cb _hidl_cb)  {
+    LOG_METHOD("");
+
     Type *types = new Type[mLights.size()];
 
     int idx = 0;
@@ -110,6 +124,8 @@ const static std::map<Type, const char*> kLogicalLights = {
 };
 
 Return<void> Light::debug(const hidl_handle& handle, const hidl_vec<hidl_string>& /* options */) {
+    LOG_METHOD("handle: ");
+
     if (handle == nullptr || handle->numFds < 1) {
         ALOGE("debug called with no handle\n");
         return Void();
@@ -132,6 +148,8 @@ Return<void> Light::debug(const hidl_handle& handle, const hidl_vec<hidl_string>
 }
 
 light_device_t* getLightDevice(const char* name) {
+    LOG_METHOD("name: %s", name);
+
     light_device_t* lightDevice;
     const hw_module_t* hwModule = NULL;
 
@@ -155,6 +173,8 @@ light_device_t* getLightDevice(const char* name) {
 }
 
 ILight* HIDL_FETCH_ILight(const char* /* name */) {
+    LOG_METHOD("");
+
     std::map<Type, light_device_t*> lights;
 
     for(auto const &pair : kLogicalLights) {
diff --git a/hardware/rockchip/liblights/lights.c b/hardware/rockchip/liblights/lights.c
index 3578fa6e78..535f19134c 100755
--- a/hardware/rockchip/liblights/lights.c
+++ b/hardware/rockchip/liblights/lights.c
@@ -70,8 +70,12 @@ char const*const BLUE_BLINK_FILE
  * device methods
  */
 
+#define LOG_METHOD(fmt, ...) \
+    ALOGD("HAL-lib |%s called with args: " fmt, __PRETTY_FUNCTION__, ##__VA_ARGS__)
+
 void init_globals(void)
 {
+    LOG_METHOD("");
     // init the mutex
     pthread_mutex_init(&g_lock, NULL);
 }
@@ -79,6 +83,7 @@ void init_globals(void)
 static int
 write_int(char const* path, int value)
 {
+    LOG_METHOD("path: %s, value: %d", path, value);
     int fd;
     static int already_warned = 0;
 
@@ -101,12 +106,14 @@ write_int(char const* path, int value)
 static int
 is_lit(struct light_state_t const* state)
 {
+    LOG_METHOD("state.color: 0x%x", state->color);
     return state->color & 0x00ffffff;
 }
 
 static int
 rgb_to_brightness(struct light_state_t const* state)
 {
+    LOG_METHOD("state.color: 0x%x", state->color);
     int color = state->color & 0x00ffffff;
     return ((77*((color>>16)&0x00ff))
             + (150*((color>>8)&0x00ff)) + (29*(color&0x00ff))) >> 8;
@@ -116,6 +123,7 @@ static int
 set_light_backlight(struct light_device_t* dev,
         struct light_state_t const* state)
 {
+    LOG_METHOD("dev: %p, state.color: 0x%x", dev, state->color);
     int err = 0;
     int brightness = rgb_to_brightness(state);
     if(!dev) {
@@ -134,6 +142,7 @@ static int
 set_speaker_light_locked(struct light_device_t* dev,
         struct light_state_t const* state)
 {
+    LOG_METHOD("dev: %p, state.color: 0x%x, state.flashMode: %d", dev, state->color, state->flashMode);
     int red, green, blue;
     int blink;
     int onMS, offMS;
@@ -206,6 +215,7 @@ set_speaker_light_locked(struct light_device_t* dev,
 static void
 handle_speaker_battery_locked(struct light_device_t* dev)
 {
+    LOG_METHOD("dev: %p", dev);
     if (is_lit(&g_battery)) {
         set_speaker_light_locked(dev, &g_battery);
     } else {
@@ -217,6 +227,7 @@ static int
 set_light_battery(struct light_device_t* dev,
         struct light_state_t const* state)
 {
+    LOG_METHOD("dev: %p, state.color: 0x%x", dev, state->color);
     pthread_mutex_lock(&g_lock);
     g_battery = *state;
     handle_speaker_battery_locked(dev);
@@ -228,6 +239,7 @@ static int
 set_light_notifications(struct light_device_t* dev,
         struct light_state_t const* state)
 {
+    LOG_METHOD("dev: %p, state.color: 0x%x", dev, state->color);
     pthread_mutex_lock(&g_lock);
     g_notification = *state;
     handle_speaker_battery_locked(dev);
@@ -239,6 +251,7 @@ static int
 set_light_attention(struct light_device_t* dev,
         struct light_state_t const* state)
 {
+    LOG_METHOD("dev: %p, state.flashMode: %d", dev, state->flashMode);
     pthread_mutex_lock(&g_lock);
     if (state->flashMode == LIGHT_FLASH_HARDWARE) {
         g_attention = state->flashOnMS;
@@ -254,6 +267,7 @@ static int
 set_light_buttons(struct light_device_t* dev,
         struct light_state_t const* state)
 {
+    LOG_METHOD("dev: %p, state.color: 0x%x", dev, state->color);
     int err = 0;
     if(!dev) {
         return -1;
@@ -268,6 +282,7 @@ set_light_buttons(struct light_device_t* dev,
 static int
 close_lights(struct light_device_t *dev)
 {
+    LOG_METHOD("dev: %p", dev);
     if (dev) {
         free(dev);
     }
@@ -277,6 +292,7 @@ close_lights(struct light_device_t *dev)
 static int
 access_rgb()
 {
+    LOG_METHOD("");
     if (access(RED_LED_FILE, F_OK) < 0)
         return -errno;
     if (access(GREEN_LED_FILE, F_OK) < 0)
@@ -289,6 +305,7 @@ access_rgb()
 static int
 access_rgb_blink()
 {
+    LOG_METHOD("");
     if (access(RED_BLINK_FILE, F_OK) < 0)
         return -errno;
     if (access(GREEN_BLINK_FILE, F_OK) < 0)
@@ -308,6 +325,7 @@ access_rgb_blink()
 static int open_lights(const struct hw_module_t* module, char const* name,
         struct hw_device_t** device)
 {
+    LOG_METHOD("module: %p, name: %s, device: %p", module, name, device);
     int (*set_light)(struct light_device_t* dev,
             struct light_state_t const* state);
 
