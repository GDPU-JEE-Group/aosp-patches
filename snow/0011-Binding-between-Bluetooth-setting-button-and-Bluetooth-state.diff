diff --git a/frameworks/base/core/java/android/bluetooth/BluetoothAdapter.java b/frameworks/base/core/java/android/bluetooth/BluetoothAdapter.java
index d09f070857..16946e011f 100644
--- a/frameworks/base/core/java/android/bluetooth/BluetoothAdapter.java
+++ b/frameworks/base/core/java/android/bluetooth/BluetoothAdapter.java
@@ -666,7 +666,6 @@ public final class BluetoothAdapter {
             new IBluetoothMetadataListener.Stub() {
         @Override
         public void onMetadataChanged(BluetoothDevice device, int key, byte[] value) {
-            Log.d("bluetooth", "----->onMetadataChanged(BluetoothDevice device, int key, byte[] value)");
             synchronized (sMetadataListeners) {
                 if (sMetadataListeners.containsKey(device)) {
                     List<Pair<OnMetadataChangedListener, Executor>> list =
@@ -695,25 +694,15 @@ public final class BluetoothAdapter {
      * platform
      */
     public static synchronized BluetoothAdapter getDefaultAdapter() {
-        Log.d("bluetooth", "-----> getDefaultAdapter()");
         if (sAdapter == null) {
-        Log.d("bluetooth", "--11111111111111111111111111");
-
             IBinder b = ServiceManager.getService(BLUETOOTH_MANAGER_SERVICE);
-        Log.d("bluetooth", "--1122222222222222222222222222222222");
-
             if (b != null) {
                 IBluetoothManager managerService = IBluetoothManager.Stub.asInterface(b);
                 sAdapter = new BluetoothAdapter(managerService);
-        Log.d("bluetooth", "--111111113333333333333333333333331111");
-
             } else {
                 Log.e(TAG, "Bluetooth binder is null");
             }
         }
-
-        Log.d("bluetooth", "--111444444444444444444111111");
-
         return sAdapter;
     }
 
@@ -721,26 +710,19 @@ public final class BluetoothAdapter {
      * Use {@link #getDefaultAdapter} to get the BluetoothAdapter instance.
      */
     BluetoothAdapter(IBluetoothManager managerService) {
-        Log.d("bluetooth", "-----> BluetoothAdapter(IBluetoothManager managerService)");
+
         if (managerService == null) {
             throw new IllegalArgumentException("bluetooth manager service is null");
         }
-
-        Log.d("bluetooth", "--1111111666666666666666666666661111");
-
         try {
             mServiceLock.writeLock().lock();
             mService = managerService.registerAdapter(mManagerCallback);
-        Log.d("bluetooth", "--11111111777777777777777777711111");
-
         } catch (RemoteException e) {
             Log.e(TAG, "", e);
         } finally {
             mServiceLock.writeLock().unlock();
         }
         mManagerService = managerService;
-        Log.d("bluetooth", "--11111888888888888888888888888888811");
-
         mLeScanClients = new HashMap<LeScanCallback, ScanCallback>();
         mToken = new Binder();
         mMock = BluetoothMock.getMock();
@@ -759,7 +741,6 @@ public final class BluetoothAdapter {
      * @throws IllegalArgumentException if address is invalid
      */
     public BluetoothDevice getRemoteDevice(String address) {
-        Log.d("bluetooth", "-----> getRemoteDevice(String address)");
         return new BluetoothDevice(address);
     }
 
@@ -775,7 +756,6 @@ public final class BluetoothAdapter {
      * @throws IllegalArgumentException if address is invalid
      */
     public BluetoothDevice getRemoteDevice(byte[] address) {
-        Log.d("bluetooth", "-----> getRemoteDevice(byte[] address)");
         if (address == null || address.length != 6) {
             throw new IllegalArgumentException("Bluetooth address must have 6 bytes");
         }
@@ -793,7 +773,6 @@ public final class BluetoothAdapter {
      * on this device before calling this method.
      */
     public BluetoothLeAdvertiser getBluetoothLeAdvertiser() {
-        Log.d("bluetooth", "-----> getBluetoothLeAdvertiser()");
         if (!getLeAccess()) {
             return null;
         }
@@ -816,7 +795,6 @@ public final class BluetoothAdapter {
      * @hide
      */
     public PeriodicAdvertisingManager getPeriodicAdvertisingManager() {
-        Log.d("bluetooth", "-----> getPeriodicAdvertisingManager()");
         if (!getLeAccess()) {
             return null;
         }
@@ -837,7 +815,6 @@ public final class BluetoothAdapter {
      * Returns a {@link BluetoothLeScanner} object for Bluetooth LE scan operations.
      */
     public BluetoothLeScanner getBluetoothLeScanner() {
-        Log.d("bluetooth", "-----> getBluetoothLeScanner()");
         if (!getLeAccess()) {
             return null;
         }
@@ -885,7 +862,6 @@ public final class BluetoothAdapter {
      */
     @SystemApi
     public boolean isLeEnabled() {
-        Log.d("bluetooth", "-----> isLeEnabled()");
         final int state = getLeState();
         if (DBG) {
             Log.d(TAG, "isLeEnabled(): " + BluetoothAdapter.nameForState(state));
@@ -920,7 +896,6 @@ public final class BluetoothAdapter {
      */
     @SystemApi
     public boolean disableBLE() {
-        Log.d("bluetooth", "-----> disableBLE() ");
         if (!isBleScanAlwaysAvailable()) {
             return false;
         }
@@ -978,7 +953,6 @@ public final class BluetoothAdapter {
      */
     @SystemApi
     public boolean enableBLE() {
-        Log.d("bluetooth", "-----> enableBLE()");
         if (!isBleScanAlwaysAvailable()) {
             return false;
         }
@@ -1067,7 +1041,6 @@ public final class BluetoothAdapter {
     @AdapterState
     @UnsupportedAppUsage
     public int getLeState() {
-        Log.d("bluetooth", "-----> getLeState()");
         int state = BluetoothAdapter.STATE_OFF;
 
         try {
@@ -1088,8 +1061,6 @@ public final class BluetoothAdapter {
     }
 
     boolean getLeAccess() {
-        Log.d("bluetooth", "-----> getLeAccess()");
-
         if (getLeState() == STATE_ON) {
             return true;
         } else if (getLeState() == STATE_BLE_ON) {
@@ -1125,7 +1096,7 @@ public final class BluetoothAdapter {
      */
     @RequiresPermission(Manifest.permission.BLUETOOTH_ADMIN)
     public boolean enable() {
-        Log.d("bluetooth", "-----> enable()");
+        Log.d("Bluetooth", "-----> enable()");
         mMock.setAble(true);
         return true;
         
@@ -1166,7 +1137,7 @@ public final class BluetoothAdapter {
      */
     @RequiresPermission(Manifest.permission.BLUETOOTH_ADMIN)
     public boolean disable() {
-        Log.d("bluetooth", "-----> disable()");
+        Log.d("Bluetooth", "-----> disable()");
         mMock.setAble(false);
         return true;
         // try {
@@ -1249,8 +1220,6 @@ public final class BluetoothAdapter {
      */
     @UnsupportedAppUsage
     public boolean factoryReset() {
-         Log.d("bluetooth", "-----> factoryReset()");
-
         try {
             mServiceLock.readLock().lock();
             if (mService != null && mService.factoryReset()
@@ -1277,8 +1246,6 @@ public final class BluetoothAdapter {
      */
     @UnsupportedAppUsage
     public ParcelUuid[] getUuids() {
-        Log.d("bluetooth", "-----> getUuids()");
-
         if (getState() != STATE_ON) {
             return null;
         }
@@ -1311,8 +1278,6 @@ public final class BluetoothAdapter {
      */
     @RequiresPermission(Manifest.permission.BLUETOOTH_ADMIN)
     public boolean setName(String name) {
-        Log.d("bluetooth", "-----> setName(String name)");
-
         if (getState() != STATE_ON) {
             return false;
         }
@@ -1339,8 +1304,6 @@ public final class BluetoothAdapter {
      */
     @RequiresPermission(Manifest.permission.BLUETOOTH_ADMIN)
     public BluetoothClass getBluetoothClass() {
-        Log.d("bluetooth", "-----> getBluetoothClass()");
-
         if (getState() != STATE_ON) {
             return null;
         }
@@ -1370,8 +1333,6 @@ public final class BluetoothAdapter {
      */
     @RequiresPermission(Manifest.permission.BLUETOOTH_PRIVILEGED)
     public boolean setBluetoothClass(BluetoothClass bluetoothClass) {
-        Log.d("bluetooth", "-----> setBluetoothClass(BluetoothClass bluetoothClass)");
-
         if (getState() != STATE_ON) {
             return false;
         }
@@ -1400,8 +1361,6 @@ public final class BluetoothAdapter {
     @RequiresPermission(Manifest.permission.BLUETOOTH_ADMIN)
     @IoCapability
     public int getIoCapability() {
-        Log.d("bluetooth", "-----> getIoCapability()");
-
         if (getState() != STATE_ON) return BluetoothAdapter.IO_CAPABILITY_UNKNOWN;
         try {
             mServiceLock.readLock().lock();
@@ -1429,7 +1388,6 @@ public final class BluetoothAdapter {
      */
     @RequiresPermission(Manifest.permission.BLUETOOTH_PRIVILEGED)
     public boolean setIoCapability(@IoCapability int capability) {
-        Log.d("bluetooth", "-----> ");
         if (getState() != STATE_ON) return false;
         try {
             mServiceLock.readLock().lock();
@@ -1454,7 +1412,6 @@ public final class BluetoothAdapter {
     @RequiresPermission(Manifest.permission.BLUETOOTH_ADMIN)
     @IoCapability
     public int getLeIoCapability() {
-        Log.d("bluetooth", "-----> ");
         if (getState() != STATE_ON) return BluetoothAdapter.IO_CAPABILITY_UNKNOWN;
         try {
             mServiceLock.readLock().lock();
@@ -1482,7 +1439,6 @@ public final class BluetoothAdapter {
      */
     @RequiresPermission(Manifest.permission.BLUETOOTH_PRIVILEGED)
     public boolean setLeIoCapability(@IoCapability int capability) {
-        Log.d("bluetooth", "-----> ");
         if (getState() != STATE_ON) return false;
         try {
             mServiceLock.readLock().lock();
@@ -1514,7 +1470,7 @@ public final class BluetoothAdapter {
     @ScanMode
     public int getScanMode() {
         Log.d("bluetooth", "-----> ");
-        return SCAN_MODE_NONE;
+            return SCAN_MODE_NONE;
         // if (getState() != STATE_ON) {
         //     return SCAN_MODE_NONE;
         // }
@@ -1594,7 +1550,6 @@ public final class BluetoothAdapter {
     /** @hide */
     @UnsupportedAppUsage
     public int getDiscoverableTimeout() {
-        Log.d("bluetooth", "-----> ");
         if (getState() != STATE_ON) {
             return -1;
         }
@@ -1614,7 +1569,6 @@ public final class BluetoothAdapter {
     /** @hide */
     @UnsupportedAppUsage
     public void setDiscoverableTimeout(int timeout) {
-        Log.d("bluetooth", "-----> ");
         if (getState() != STATE_ON) {
             return;
         }
@@ -1639,7 +1593,6 @@ public final class BluetoothAdapter {
      * @hide
      */
     public long getDiscoveryEndMillis() {
-        Log.d("bluetooth", "-----> ");
         try {
             mServiceLock.readLock().lock();
             if (mService != null) {
@@ -1662,7 +1615,6 @@ public final class BluetoothAdapter {
     }
 
     private String getOpPackageName() {
-        Log.d("bluetooth", "-----> ");
         // Workaround for legacy API for getting a BluetoothAdapter not
         // passing a context
         if (mContext != null) {
@@ -1702,7 +1654,6 @@ public final class BluetoothAdapter {
      */
     @RequiresPermission(Manifest.permission.BLUETOOTH_ADMIN)
     public boolean startDiscovery() {
-        Log.d("bluetooth", "-----> ");
         if (getState() != STATE_ON) {
             return false;
         }
@@ -1737,7 +1688,6 @@ public final class BluetoothAdapter {
      */
     @RequiresPermission(Manifest.permission.BLUETOOTH_ADMIN)
     public boolean cancelDiscovery() {
-        Log.d("bluetooth", "-----> ");
         if (getState() != STATE_ON) {
             return false;
         }
@@ -1774,7 +1724,6 @@ public final class BluetoothAdapter {
      */
     @RequiresPermission(Manifest.permission.BLUETOOTH)
     public boolean isDiscovering() {
-        Log.d("bluetooth", "-----> ");
         if (getState() != STATE_ON) {
             return false;
         }
@@ -1797,7 +1746,6 @@ public final class BluetoothAdapter {
      * @return true if Multiple Advertisement feature is supported
      */
     public boolean isMultipleAdvertisementSupported() {
-        Log.d("bluetooth", "-----> ");
         if (getState() != STATE_ON) {
             return false;
         }
@@ -1826,7 +1774,6 @@ public final class BluetoothAdapter {
      */
     @SystemApi
     public boolean isBleScanAlwaysAvailable() {
-        Log.d("bluetooth", "-----> ");
         try {
             return mManagerService.isBleScanAlwaysAvailable();
         } catch (RemoteException e) {
@@ -1841,7 +1788,6 @@ public final class BluetoothAdapter {
      * @return true if chipset supports on-chip filtering
      */
     public boolean isOffloadedFilteringSupported() {
-        Log.d("bluetooth", "-----> ");
         if (!getLeAccess()) {
             return false;
         }
@@ -1864,7 +1810,6 @@ public final class BluetoothAdapter {
      * @return true if chipset supports on-chip scan batching
      */
     public boolean isOffloadedScanBatchingSupported() {
-        Log.d("bluetooth", "-----> ");
         if (!getLeAccess()) {
             return false;
         }
@@ -1887,7 +1832,6 @@ public final class BluetoothAdapter {
      * @return true if chipset supports LE 2M PHY feature
      */
     public boolean isLe2MPhySupported() {
-        Log.d("bluetooth", "-----> ");
         if (!getLeAccess()) {
             return false;
         }
@@ -1910,7 +1854,6 @@ public final class BluetoothAdapter {
      * @return true if chipset supports LE Coded PHY feature
      */
     public boolean isLeCodedPhySupported() {
-        Log.d("bluetooth", "-----> ");
         if (!getLeAccess()) {
             return false;
         }
@@ -1933,7 +1876,6 @@ public final class BluetoothAdapter {
      * @return true if chipset supports LE Extended Advertising feature
      */
     public boolean isLeExtendedAdvertisingSupported() {
-        Log.d("bluetooth", "-----> ");
         if (!getLeAccess()) {
             return false;
         }
@@ -1956,7 +1898,6 @@ public final class BluetoothAdapter {
      * @return true if chipset supports LE Periodic Advertising feature
      */
     public boolean isLePeriodicAdvertisingSupported() {
-        Log.d("bluetooth", "-----> ");
         if (!getLeAccess()) {
             return false;
         }
@@ -1980,7 +1921,6 @@ public final class BluetoothAdapter {
      * @return the maximum LE advertising data length.
      */
     public int getLeMaximumAdvertisingDataLength() {
-        Log.d("bluetooth", "-----> ");
         if (!getLeAccess()) {
             return 0;
         }
@@ -2003,7 +1943,6 @@ public final class BluetoothAdapter {
      * @return true if phone supports Hearing Aid Profile
      */
     private boolean isHearingAidProfileSupported() {
-        Log.d("bluetooth", "-----> ");
         try {
             return mManagerService.isHearingAidProfileSupported();
         } catch (RemoteException e) {
@@ -2020,7 +1959,6 @@ public final class BluetoothAdapter {
      */
     @RequiresPermission(Manifest.permission.BLUETOOTH)
     public int getMaxConnectedAudioDevices() {
-        Log.d("bluetooth", "-----> ");
         try {
             mServiceLock.readLock().lock();
             if (mService != null) {
@@ -2041,7 +1979,6 @@ public final class BluetoothAdapter {
      * @hide
      */
     public boolean isHardwareTrackingFiltersAvailable() {
-        Log.d("bluetooth", "-----> ");
         if (!getLeAccess()) {
             return false;
         }
@@ -2072,7 +2009,6 @@ public final class BluetoothAdapter {
      */
     @Deprecated
     public BluetoothActivityEnergyInfo getControllerActivityEnergyInfo(int updateType) {
-        Log.d("bluetooth", "-----> ");
         SynchronousResultReceiver receiver = new SynchronousResultReceiver();
         requestControllerActivityEnergyInfo(receiver);
         try {
@@ -2098,7 +2034,6 @@ public final class BluetoothAdapter {
      * @hide
      */
     public void requestControllerActivityEnergyInfo(ResultReceiver result) {
-        Log.d("bluetooth", "-----> ");
         try {
             mServiceLock.readLock().lock();
             if (mService != null) {
@@ -2128,10 +2063,6 @@ public final class BluetoothAdapter {
      */
     @RequiresPermission(Manifest.permission.BLUETOOTH)
     public Set<BluetoothDevice> getBondedDevices() {
-        Log.d("bluetooth", "-----> ");
-        if (mMock != null) {
-            return mMock.getBondedDevices();
-        }
         if (getState() != STATE_ON) {
             return toDeviceSet(new BluetoothDevice[0]);
         }
@@ -2160,7 +2091,6 @@ public final class BluetoothAdapter {
      * @hide
      */
     public List<Integer> getSupportedProfiles() {
-        Log.d("bluetooth", "-----> ");
         final ArrayList<Integer> supportedProfiles = new ArrayList<Integer>();
 
         try {
@@ -2200,7 +2130,6 @@ public final class BluetoothAdapter {
      */
     @UnsupportedAppUsage
     public int getConnectionState() {
-        Log.d("bluetooth", "-----> ");
         if (getState() != STATE_ON) {
             return BluetoothAdapter.STATE_DISCONNECTED;
         }
@@ -2231,7 +2160,6 @@ public final class BluetoothAdapter {
      */
     @RequiresPermission(Manifest.permission.BLUETOOTH)
     public int getProfileConnectionState(int profile) {
-        Log.d("bluetooth", "-----> ");
         if (getState() != STATE_ON) {
             return BluetoothProfile.STATE_DISCONNECTED;
         }
@@ -2264,7 +2192,6 @@ public final class BluetoothAdapter {
      * @hide
      */
     public BluetoothServerSocket listenUsingRfcommOn(int channel) throws IOException {
-        Log.d("bluetooth", "-----> ");
         return listenUsingRfcommOn(channel, false, false);
     }
 
@@ -2291,7 +2218,6 @@ public final class BluetoothAdapter {
     @UnsupportedAppUsage
     public BluetoothServerSocket listenUsingRfcommOn(int channel, boolean mitm,
             boolean min16DigitPin) throws IOException {
-                Log.d("bluetooth", "-----> ");
         BluetoothServerSocket socket =
                 new BluetoothServerSocket(BluetoothSocket.TYPE_RFCOMM, true, true, channel, mitm,
                         min16DigitPin);
@@ -2333,7 +2259,6 @@ public final class BluetoothAdapter {
     @RequiresPermission(Manifest.permission.BLUETOOTH)
     public BluetoothServerSocket listenUsingRfcommWithServiceRecord(String name, UUID uuid)
             throws IOException {
-                Log.d("bluetooth", "-----> ");
         return createNewRfcommSocketAndRecord(name, uuid, true, true);
     }
 
@@ -2366,7 +2291,6 @@ public final class BluetoothAdapter {
     @RequiresPermission(Manifest.permission.BLUETOOTH)
     public BluetoothServerSocket listenUsingInsecureRfcommWithServiceRecord(String name, UUID uuid)
             throws IOException {
-                Log.d("bluetooth", "-----> ");
         return createNewRfcommSocketAndRecord(name, uuid, false, false);
     }
 
@@ -2407,14 +2331,12 @@ public final class BluetoothAdapter {
     @UnsupportedAppUsage
     public BluetoothServerSocket listenUsingEncryptedRfcommWithServiceRecord(String name, UUID uuid)
             throws IOException {
-                Log.d("bluetooth", "-----> ");
         return createNewRfcommSocketAndRecord(name, uuid, false, true);
     }
 
 
     private BluetoothServerSocket createNewRfcommSocketAndRecord(String name, UUID uuid,
             boolean auth, boolean encrypt) throws IOException {
-                Log.d("bluetooth", "-----> ");
         BluetoothServerSocket socket;
         socket = new BluetoothServerSocket(BluetoothSocket.TYPE_RFCOMM, auth, encrypt,
                 new ParcelUuid(uuid));
@@ -2439,7 +2361,6 @@ public final class BluetoothAdapter {
      * @hide
      */
     public BluetoothServerSocket listenUsingInsecureRfcommOn(int port) throws IOException {
-        Log.d("bluetooth", "-----> ");
         BluetoothServerSocket socket =
                 new BluetoothServerSocket(BluetoothSocket.TYPE_RFCOMM, false, false, port);
         int errno = socket.mSocket.bindListen();
@@ -2465,7 +2386,6 @@ public final class BluetoothAdapter {
      * @hide
      */
     public BluetoothServerSocket listenUsingEncryptedRfcommOn(int port) throws IOException {
-        Log.d("bluetooth", "-----> ");
         BluetoothServerSocket socket =
                 new BluetoothServerSocket(BluetoothSocket.TYPE_RFCOMM, false, true, port);
         int errno = socket.mSocket.bindListen();
@@ -2491,7 +2411,6 @@ public final class BluetoothAdapter {
      * @hide
      */
     public static BluetoothServerSocket listenUsingScoOn() throws IOException {
-        Log.d("bluetooth", "-----> ");
         BluetoothServerSocket socket =
                 new BluetoothServerSocket(BluetoothSocket.TYPE_SCO, false, false, -1);
         int errno = socket.mSocket.bindListen();
@@ -2520,7 +2439,6 @@ public final class BluetoothAdapter {
      */
     public BluetoothServerSocket listenUsingL2capOn(int port, boolean mitm, boolean min16DigitPin)
             throws IOException {
-                Log.d("bluetooth", "-----> ");
         BluetoothServerSocket socket =
                 new BluetoothServerSocket(BluetoothSocket.TYPE_L2CAP, true, true, port, mitm,
                         min16DigitPin);
@@ -2552,7 +2470,6 @@ public final class BluetoothAdapter {
      * @hide
      */
     public BluetoothServerSocket listenUsingL2capOn(int port) throws IOException {
-        Log.d("bluetooth", "-----> ");
         return listenUsingL2capOn(port, false, false);
     }
 
@@ -2570,7 +2487,6 @@ public final class BluetoothAdapter {
      * @hide
      */
     public BluetoothServerSocket listenUsingInsecureL2capOn(int port) throws IOException {
-        Log.d("bluetooth", "-----> ");
         Log.d(TAG, "listenUsingInsecureL2capOn: port=" + port);
         BluetoothServerSocket socket =
                 new BluetoothServerSocket(BluetoothSocket.TYPE_L2CAP, false, false, port, false,
@@ -2602,7 +2518,6 @@ public final class BluetoothAdapter {
      * @hide
      */
     public Pair<byte[], byte[]> readOutOfBandData() {
-        Log.d("bluetooth", "-----> ");
         return null;
     }
 
@@ -2624,7 +2539,6 @@ public final class BluetoothAdapter {
      */
     public boolean getProfileProxy(Context context, BluetoothProfile.ServiceListener listener,
             int profile) {
-                Log.d("bluetooth", "-----> ");
         if (context == null || listener == null) {
             return false;
         }
@@ -2845,7 +2759,6 @@ public final class BluetoothAdapter {
     @SystemApi
     @RequiresPermission(android.Manifest.permission.BLUETOOTH_ADMIN)
     public boolean enableNoAutoConnect() {
-        Log.d("bluetooth", "----->enableNoAutoConnect() ");
         if (isEnabled()) {
             if (DBG) {
                 Log.d(TAG, "enableNoAutoConnect(): BT already enabled!");
@@ -2891,7 +2804,6 @@ public final class BluetoothAdapter {
      */
     public boolean changeApplicationBluetoothState(boolean on,
             BluetoothStateChangeCallback callback) {
-                Log.d("bluetooth", "-----> ");
         return false;
     }
 
@@ -2922,13 +2834,11 @@ public final class BluetoothAdapter {
     }
 
     private Set<BluetoothDevice> toDeviceSet(BluetoothDevice[] devices) {
-        Log.d("bluetooth", "-----> ");
         Set<BluetoothDevice> deviceSet = new HashSet<BluetoothDevice>(Arrays.asList(devices));
         return Collections.unmodifiableSet(deviceSet);
     }
 
     protected void finalize() throws Throwable {
-        Log.d("bluetooth", "-----> ");
         try {
             mManagerService.unregisterAdapter(mManagerCallback);
         } catch (RemoteException e) {
@@ -2947,7 +2857,6 @@ public final class BluetoothAdapter {
      * @return true if the address is valid, false otherwise
      */
     public static boolean checkBluetoothAddress(String address) {
-        Log.d("bluetooth", "-----> ");
         if (address == null || address.length() != ADDRESS_LENGTH) {
             return false;
         }
@@ -2973,7 +2882,6 @@ public final class BluetoothAdapter {
 
     @UnsupportedAppUsage
     /*package*/ IBluetoothManager getBluetoothManager() {
-        Log.d("bluetooth", "-----> ");
         return mManagerService;
     }
 
@@ -2982,7 +2890,6 @@ public final class BluetoothAdapter {
 
     @UnsupportedAppUsage
     /*package*/ IBluetooth getBluetoothService(IBluetoothManagerCallback cb) {
-        Log.d("bluetooth", "-----> ");
         synchronized (mProxyServiceStateCallbacks) {
             if (cb == null) {
                 Log.w(TAG, "getBluetoothService() called with no BluetoothManagerCallback");
@@ -2994,7 +2901,6 @@ public final class BluetoothAdapter {
     }
 
     /*package*/ void removeServiceStateCallback(IBluetoothManagerCallback cb) {
-        Log.d("bluetooth", "-----> ");
         synchronized (mProxyServiceStateCallbacks) {
             mProxyServiceStateCallbacks.remove(cb);
         }
diff --git a/frameworks/base/core/java/com/android/internal/space/api/BluetoothMock.java b/frameworks/base/core/java/com/android/internal/space/api/BluetoothMock.java
index ada858464b..65f0385489 100644
--- a/frameworks/base/core/java/com/android/internal/space/api/BluetoothMock.java
+++ b/frameworks/base/core/java/com/android/internal/space/api/BluetoothMock.java
@@ -12,7 +12,9 @@ import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashSet;
 import java.util.Set;
+
 import android.util.Log;
+import android.os.SystemProperties;
 
 public class BluetoothMock extends IMockCallback.Stub {
 
@@ -43,7 +45,10 @@ public class BluetoothMock extends IMockCallback.Stub {
 
     private BluetoothMock() {
          mService = INineDSpace.Stub.asInterface(ServiceManager.getService(Context.SPACE_SERVICE));
-         Enabled=false;
+         Enabled=SystemProperties.getBoolean("s9.bluetooth.state", false);
+        Log.d("Bluetooth-","---------------------------BluetoothMock init");
+        Log.d("Bluetooth-","---Enabled:"+Enabled);
+        Log.d("Bluetooth-","---s9.bluetooth.state:"+SystemProperties.getBoolean("s9.bluetooth.state", false));
     }
 
     public boolean isMock() {
@@ -74,11 +79,22 @@ public class BluetoothMock extends IMockCallback.Stub {
 
     public void setAble(boolean raw) {
         Enabled=raw;
-        // return Enabled;
+        String val=Enabled ? "1" : "0";
+        SystemProperties.set("s9.bluetooth.state", val);
+        Log.d("Bluetooth-","---------------------------setAble(boolean raw)");
+        Log.d("Bluetooth-","---raw:"+raw);
+        Log.d("Bluetooth-","---Enabled:"+Enabled);
+        Log.d("Bluetooth-","---s9.bluetooth.state:"+SystemProperties.getBoolean("s9.bluetooth.state", false));
     }
 
-    public int getState(int state) {
-        return isMock() ? BluetoothAdapter.STATE_ON : state;
+    public int getState(int state) {// state是默认值
+        Log.d("Bluetooth-","---------------------------getState(int state)");
+        Log.d("Bluetooth-","---isMock():"+isMock());
+        if (!isMock()) return state;
+        state = Enabled ? BluetoothAdapter.STATE_ON : BluetoothAdapter.STATE_OFF;
+        Log.d("Bluetooth-","---state:"+state);
+        Log.d("Bluetooth-","---Enabled:"+Enabled);
+        return state;
     }
 
     private Set<BluetoothDevice> toDeviceSet(BluetoothDevice[] devices) {
diff --git a/packages/apps/Settings/src/com/android/settings/bluetooth/BluetoothEnabler.java b/packages/apps/Settings/src/com/android/settings/bluetooth/BluetoothEnabler.java
index 2da9eea431..4eeab9bc02 100644
--- a/packages/apps/Settings/src/com/android/settings/bluetooth/BluetoothEnabler.java
+++ b/packages/apps/Settings/src/com/android/settings/bluetooth/BluetoothEnabler.java
@@ -32,6 +32,8 @@ import com.android.settings.widget.SwitchWidgetController;
 import com.android.settingslib.RestrictedLockUtils.EnforcedAdmin;
 import com.android.settingslib.WirelessUtils;
 import com.android.settingslib.core.instrumentation.MetricsFeatureProvider;
+import android.util.Log;
+
 
 /**
  * BluetoothEnabler is a helper to manage the Bluetooth on/off checkbox
@@ -246,6 +248,7 @@ public final class BluetoothEnabler implements SwitchWidgetController.OnSwitchCh
     }
 
     private boolean setBluetoothEnabled(boolean isEnabled) {
+        Log.d("Bluetooth", "-----> setBluetoothEnabled(boolean isEnabled)");
         return isEnabled ? mBluetoothAdapter.enable() : mBluetoothAdapter.disable();
     }
 }
