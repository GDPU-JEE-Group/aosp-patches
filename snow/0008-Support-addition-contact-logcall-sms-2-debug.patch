diff --git a/device/rockchip/space-common/device.mk b/device/rockchip/space-common/device.mk
index 2fadf9f128..42e319d102 100644
--- a/device/rockchip/space-common/device.mk
+++ b/device/rockchip/space-common/device.mk
@@ -98,3 +98,6 @@ PRODUCT_COPY_FILES += $(PRODUCT_MOCK_CONFIG):system/etc/default_mock.prop
 endif
 
 PRODUCT_LOCALES += en_US af_ZA am_ET ar_EG ar_XB as_IN az_AZ be_BY bg_BG bn_BD bs_BA ca_ES cs_CZ da_DK de_DE el_GR en_AU en_CA en_GB en_IN en_XA es_ES es_US et_EE eu_ES fa_IR fi_FI fr_CA fr_FR gl_ES gu_IN hi_IN hr_HR hu_HU hy_AM in_ID is_IS it_IT iw_IL ja_JP ka_GE kk_KZ km_KH kn_IN ko_KR ky_KG lo_LA lt_LT lv_LV mk_MK ml_IN mn_MN mr_IN ms_MY my_MM nb_NO ne_NP nl_NL or_IN pa_IN pl_PL pt_BR pt_PT ro_RO ru_RU si_LK sk_SK sl_SI sq_AL sr_Latn_RS sr_RS sv_SE sw_TZ ta_IN te_IN th_TH tl_PH tr_TR uk_UA ur_PK uz_UZ vi_VN zh_CN zh_HK zh_TW zu_ZA
+
+#通讯录
+PRODUCT_PACKAGES +=  Dialer messaging  
\ No newline at end of file
diff --git a/vendor/ntimespace/Space9dService/AndroidManifest.xml b/vendor/ntimespace/Space9dService/AndroidManifest.xml
index 874ff50ce5..f7ced322ec 100644
--- a/vendor/ntimespace/Space9dService/AndroidManifest.xml
+++ b/vendor/ntimespace/Space9dService/AndroidManifest.xml
@@ -9,6 +9,8 @@
     <uses-permission android:name="android.permission.RECEIVE_BOOT_COMPLETED" />
     <uses-permission android:name="android.permission.BIND_NOTIFICATION_LISTENER_SERVICE"
         tools:ignore="ProtectedPermissions" />
+    <uses-permission android:name="android.permission.WRITE_SMS"/>
+    <uses-permission android:name="android.permission.READ_SMS"/>
 
     <application
         android:name="com.android.server.Space"
diff --git a/vendor/ntimespace/Space9dService/src/com/android/server/Space9dManagerService.java b/vendor/ntimespace/Space9dService/src/com/android/server/Space9dManagerService.java
index c6c97bb673..8bbc6322d8 100644
--- a/vendor/ntimespace/Space9dService/src/com/android/server/Space9dManagerService.java
+++ b/vendor/ntimespace/Space9dService/src/com/android/server/Space9dManagerService.java
@@ -287,6 +287,6 @@ public class Space9dManagerService extends INineDSpace.Stub {
     @Override
     public void onShellCommand(FileDescriptor in, FileDescriptor out, FileDescriptor err,
             String[] args, ShellCallback callback, ResultReceiver result) {
-        new Space9dManagerShellCommand(this).exec(this, in, out, err, args, callback, result);
+        new Space9dManagerShellCommand(this,mContext).exec(this, in, out, err, args, callback, result);
     }
 }
diff --git a/vendor/ntimespace/Space9dService/src/com/android/server/Space9dManagerShellCommand.java b/vendor/ntimespace/Space9dService/src/com/android/server/Space9dManagerShellCommand.java
index c85b951d35..1ff6e9de6e 100644
--- a/vendor/ntimespace/Space9dService/src/com/android/server/Space9dManagerShellCommand.java
+++ b/vendor/ntimespace/Space9dService/src/com/android/server/Space9dManagerShellCommand.java
@@ -11,13 +11,32 @@ import com.android.internal.space.INineDSpace;
 import java.io.PrintWriter;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Map;
+
+import android.content.Context;
+
+import android.provider.ContactsContract;
+import android.provider.CallLog;
+import android.provider.Telephony;
+import android.telephony.SmsManager;
+
+import android.content.ContentResolver;
+import android.content.ContentValues;
+import android.net.Uri;
+import android.content.ContentUris;
+import android.database.Cursor;
+import java.util.Calendar;
+import android.util.Log;
+
 
 public class Space9dManagerShellCommand extends ShellCommand {
 
     private INineDSpace mService;
+    private final Context mContext;
 
-    public Space9dManagerShellCommand(INineDSpace service) {
+    public Space9dManagerShellCommand(INineDSpace service, Context context) {
         this.mService = service;
+        this.mContext = context;
     }
 
     public static int stringToBusinessType(String type) {
@@ -123,6 +142,342 @@ public class Space9dManagerShellCommand extends ShellCommand {
         pw.println(String.format("Update mock modules: %s", buffer));
     }
 
+private void runContact(PrintWriter pw) {
+    ArrayMap<String, String> addMap = new ArrayMap<>();
+    List<String> delList = new ArrayList<>();
+    String nextOpt;
+    String[] item;
+
+    while ((nextOpt = getNextArg()) != null) {
+        if ("add".equals(nextOpt)) {
+            // 继续获取后续参数，直到遇到非键值对参数
+            while ((nextOpt = getNextArg()) != null) {
+                item = nextOpt.split("=");
+                if (item.length == 2) {
+                    addMap.put(item[0], item[1]);
+                    pw.println("=> " + item[0] + ": " + item[1]);
+                } else {
+                    break; // 遇到非键值对参数，退出循环
+                }
+            }
+        } else if ("-r".equals(nextOpt)) {
+            delList.add(getNextArg());
+        }
+    }
+
+    // 打印 addMap
+    pw.println("addMap:");
+    for (Map.Entry<String, String> entry : addMap.entrySet()) {
+        pw.println(entry.getKey() + "=" + entry.getValue());
+    }
+
+    // 打印 delList
+    pw.println("delList:");
+    for (String delItem : delList) {
+        pw.println(delItem);
+    }
+
+    String displayName = null;
+    String phoneNumber = null;
+    String email = null;
+
+    try {
+        displayName = addMap.get("displayName");
+        pw.println("displayName: " + displayName);
+
+        phoneNumber = addMap.get("phoneNumber");
+        pw.println("phoneNumber: " + phoneNumber);
+
+        email = addMap.get("email");
+        pw.println("email: " + email);
+
+
+    } catch (NumberFormatException e) {
+        pw.println("Failed to parse number: " + e.getMessage());
+    } catch (NullPointerException e) {
+        pw.println("Failed to get value: " + e.getMessage());
+    }
+
+
+    ContentResolver resolver = mContext.getContentResolver();
+
+        // 插入RawContact
+        ContentValues values = new ContentValues();
+        Uri rawContactUri = resolver.insert(ContactsContract.RawContacts.CONTENT_URI, values);
+        long rawContactId = ContentUris.parseId(rawContactUri);
+
+        // 插入姓名
+        values.clear();
+        values.put(ContactsContract.Data.RAW_CONTACT_ID, rawContactId);
+        values.put(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.StructuredName.CONTENT_ITEM_TYPE);
+        values.put(ContactsContract.CommonDataKinds.StructuredName.DISPLAY_NAME, displayName);
+        resolver.insert(ContactsContract.Data.CONTENT_URI, values);
+
+        // 插入电话号码
+        values.clear();
+        values.put(ContactsContract.Data.RAW_CONTACT_ID, rawContactId);
+        values.put(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.Phone.CONTENT_ITEM_TYPE);
+        values.put(ContactsContract.CommonDataKinds.Phone.NUMBER, phoneNumber);
+        values.put(ContactsContract.CommonDataKinds.Phone.TYPE, ContactsContract.CommonDataKinds.Phone.TYPE_MOBILE);
+        resolver.insert(ContactsContract.Data.CONTENT_URI, values);
+
+        // 插入Email
+        values.clear();
+        values.put(ContactsContract.Data.RAW_CONTACT_ID, rawContactId);
+        values.put(ContactsContract.Data.MIMETYPE, ContactsContract.CommonDataKinds.Email.CONTENT_ITEM_TYPE);
+        values.put(ContactsContract.CommonDataKinds.Email.DATA, email);
+        values.put(ContactsContract.CommonDataKinds.Email.TYPE, ContactsContract.CommonDataKinds.Email.TYPE_WORK);
+        resolver.insert(ContactsContract.Data.CONTENT_URI, values);
+}
+
+private void runCallLog(PrintWriter pw) {
+    ArrayMap<String, String> addMap = new ArrayMap<>();
+    List<String> delList = new ArrayList<>();
+    String nextOpt;
+    String[] item;
+
+    while ((nextOpt = getNextArg()) != null) {
+        if ("add".equals(nextOpt)) {
+            // 继续获取后续参数，直到遇到非键值对参数
+            while ((nextOpt = getNextArg()) != null) {
+                item = nextOpt.split("=");
+                if (item.length == 2) {
+                    addMap.put(item[0], item[1]);
+                    pw.println("=> " + item[0] + ": " + item[1]);
+                } else {
+                    break; // 遇到非键值对参数，退出循环
+                }
+            }
+        } else if ("-r".equals(nextOpt)) {
+            delList.add(getNextArg());
+        }
+    }
+
+    // 打印 addMap
+    pw.println("addMap:");
+    for (Map.Entry<String, String> entry : addMap.entrySet()) {
+        pw.println(entry.getKey() + "=" + entry.getValue());
+    }
+
+    // 打印 delList
+    pw.println("delList:");
+    for (String delItem : delList) {
+        pw.println(delItem);
+    }
+
+    String phoneNumber = null;
+    int callType = 0;
+    long callDuration = 0;
+    long date = 0;
+
+
+    try {
+        phoneNumber = addMap.get("phoneNumber");
+        pw.println("phoneNumber: " + phoneNumber);
+
+        callType = Integer.parseInt(addMap.get("callType"));
+        pw.println("callType: " + callType);
+
+        if (addMap.get("callDuration") != null) {
+            callDuration = Long.parseLong(addMap.get("callDuration"));
+            pw.println("callDuration: " + callDuration);
+        }
+
+        if (addMap.get("date") != null) {
+            date = Long.parseLong(addMap.get("date"));
+            pw.println("date: " + date);
+        }
+    } catch (NumberFormatException e) {
+        pw.println("Failed to parse number: " + e.getMessage());
+    } catch (NullPointerException e) {
+        pw.println("Failed to get value: " + e.getMessage());
+    }
+
+    ContentResolver resolver = mContext.getContentResolver();
+    ContentValues values = new ContentValues();
+
+    // 电话号码
+    values.put(CallLog.Calls.NUMBER, phoneNumber);
+
+    // 通话类型（呼入/呼出/未接）
+    values.put(CallLog.Calls.TYPE, callType);
+
+    // 通话时长
+    values.put(CallLog.Calls.DURATION, callDuration);
+
+    // 通话日期和时间（以毫秒为单位）
+    values.put(CallLog.Calls.DATE, date);
+
+    // 是否为新记录
+    values.put(CallLog.Calls.NEW, 1);
+
+    // 插入记录
+    resolver.insert(CallLog.Calls.CONTENT_URI, values);
+}
+
+
+private void runSms(PrintWriter pw) {
+    ArrayMap<String, String> addMap = new ArrayMap<>();
+    List<String> delList = new ArrayList<>();
+    String nextOpt;
+    String[] item;
+
+    while ((nextOpt = getNextArg()) != null) {
+        if ("add".equals(nextOpt)) {
+            // 继续获取后续参数，直到遇到非键值对参数
+            while ((nextOpt = getNextArg()) != null) {
+                item = nextOpt.split("=");
+                if (item.length == 2) {
+                    addMap.put(item[0], item[1]);
+                    pw.println("=> " + item[0] + ": " + item[1]);
+                } else {
+                    break; // 遇到非键值对参数，退出循环
+                }
+            }
+        } else if ("-r".equals(nextOpt)) {
+            delList.add(getNextArg());
+        }
+    }
+
+    // 打印 addMap
+    pw.println("addMap:");
+    for (Map.Entry<String, String> entry : addMap.entrySet()) {
+        pw.println(entry.getKey() + "=" + entry.getValue());
+    }
+
+    // 打印 delList
+    pw.println("delList:");
+    for (String delItem : delList) {
+        pw.println(delItem);
+    }
+
+    String address = null;
+    String body = null;
+    long date = 0;
+    int type = 0;
+
+    try {
+        address = addMap.get("address");
+        pw.println("address: " + address);
+
+        body = addMap.get("body");
+        pw.println("body: " + body);
+
+        if (addMap.get("date") != null) {
+            date = Long.parseLong(addMap.get("date"));
+            pw.println("date: " + date);
+        }
+
+        type = Integer.parseInt(addMap.get("type"));
+        pw.println("type: " + type);
+    } catch (NumberFormatException e) {
+        pw.println("Failed to parse number: " + e.getMessage());
+    } catch (NullPointerException e) {
+        pw.println("Failed to get value: " + e.getMessage());
+    }
+
+    try {
+        // ContentResolver resolver = mContext.getContentResolver();
+        // ContentValues values = new ContentValues();
+
+        // // 短信地址（电话号码）
+        // values.put(Telephony.Sms.ADDRESS, address);
+
+        // // 短信内容
+        // values.put(Telephony.Sms.BODY, body);
+
+        // // 短信日期和时间（以毫秒为单位）
+        // values.put(Telephony.Sms.DATE, date);
+
+        // // 短信类型（1: 收件箱, 2: 发件箱）
+        // values.put(Telephony.Sms.TYPE, type);
+
+        // // 插入记录
+        // Uri uri = (type == Telephony.Sms.MESSAGE_TYPE_INBOX) 
+        //           ? Telephony.Sms.Inbox.CONTENT_URI 
+        //           : Telephony.Sms.Sent.CONTENT_URI;
+        // Uri insertedUri = resolver.insert(uri, values);
+
+        // if (insertedUri != null) {
+        //     pw.println("SMS inserted successfully: " + insertedUri.toString());
+
+        //     // 查询数据库，确保记录存在
+        //     Cursor cursor = resolver.query(insertedUri, null, null, null, null);
+        //         pw.println("111111 " );
+
+        //     if (cursor != null) {
+        //         pw.println("222222222 " );
+
+        //         while (cursor.moveToNext()) {
+        //         pw.println("333333333333 " );
+
+        //             String addressInDb = cursor.getString(cursor.getColumnIndex(Telephony.Sms.ADDRESS));
+        //             String bodyInDb = cursor.getString(cursor.getColumnIndex(Telephony.Sms.BODY));
+        //             long dateInDb = cursor.getLong(cursor.getColumnIndex(Telephony.Sms.DATE));
+        //             int typeInDb = cursor.getInt(cursor.getColumnIndex(Telephony.Sms.TYPE));
+        //             pw.println("SMS: " + addressInDb + ", " + bodyInDb + ", " + dateInDb + ", " + typeInDb);
+
+        //         pw.println("44444444444 " );
+
+        //         }
+        //         cursor.close();
+        //     }else{
+        //         pw.println("cursor == null " );
+        //     }
+        // } else {
+        //     pw.println("Failed to insert SMS.");
+        // }
+        //         pw.println("5555555555 " );
+
+
+//---------------------
+// 使用 SmsManager 发送短信
+    SmsManager smsManager = SmsManager.getDefault();
+    smsManager.sendTextMessage("1234567890", null, "smsManagerhelloworld你好世界！", null, null);
+
+ // 设置要插入的短信的日期（例如 2020 年的时间戳）
+    Calendar calendar = Calendar.getInstance();
+    calendar.set(2020, Calendar.JANUARY, 1); // 设置为 2020 年 1 月 1 日
+    long customDate  = calendar.getTimeInMillis();
+
+    // 插入带有指定日期的短信
+    insertSmsWithDate( "1234567890", "smsManagerhelloworld你好世界！", customDate, Telephony.Sms.MESSAGE_TYPE_INBOX);
+
+    } catch (Exception e) {
+        pw.println("Error inserting SMS: " + e.getMessage());
+    }
+}
+
+private void insertSmsWithDate( String address, String body, long date, int type) {
+    ContentResolver resolver = mContext.getContentResolver();
+    ContentValues values = new ContentValues();
+
+    // 短信地址（电话号码）
+    values.put(Telephony.Sms.ADDRESS, address);
+
+    // 短信内容
+    values.put(Telephony.Sms.BODY, body);
+
+    // 短信日期和时间（以毫秒为单位）
+    values.put(Telephony.Sms.DATE, date);
+
+    // 短信类型（1: 收件箱, 2: 发件箱）
+    values.put(Telephony.Sms.TYPE, type);
+
+    // 插入记录
+    Uri uri = (type == Telephony.Sms.MESSAGE_TYPE_INBOX) 
+              ? Telephony.Sms.Inbox.CONTENT_URI 
+              : Telephony.Sms.Sent.CONTENT_URI;
+    Uri insertedUri = resolver.insert(uri, values);
+
+    if (insertedUri != null) {
+        Log.d("SMS Insert", "SMS inserted successfully: " + insertedUri.toString());
+    } else {
+        Log.d("SMS Insert", "Failed to insert SMS.");
+    }
+}
+
+
     @Override
     public int onCommand(String cmd) {
         if (cmd == null) {
@@ -149,6 +504,15 @@ public class Space9dManagerShellCommand extends ShellCommand {
                 case "config":
                     runUpdateConfig(pw);
                     break;
+                case "contact":
+                    runContact(pw);
+                    break;
+                case "calllog":
+                    runCallLog(pw);
+                    break;
+                case "sms":
+                    runSms(pw);
+                    break;
                 default:
                     pw.println("Unknown command: " + cmd);
                     break;
